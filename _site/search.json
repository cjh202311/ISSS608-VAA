[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Applications",
    "section": "",
    "text": "In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "2 Introducing ggplot",
    "text": "2 Introducing ggplot\nggplot2 is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics\n\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\nFor more detail, visit ggplot2 link.\n\n\n2.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\n\nCode\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\nWhy ggplot2 is recommended?\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3 Grammar of Graphics",
    "text": "3 Grammar of Graphics\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\nWhat is a statistical graphic?\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n3.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "4 Essential Grammatical Elements in ggplot2: data",
    "text": "4 Essential Grammatical Elements in ggplot2: data\nLet us call the function using the code chunk on the right.ggplot()\n\n\nCode\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by .fortify()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "5 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "5 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "6 Essential Grammatical Elements in ggplot2: geom",
    "text": "6 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n6.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n6.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n6.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n6.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20\nfill argument is used to shade the histogram with light blue color\ncolor argument is used to change the outline colour of the bars in black\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"lightblue\")  \n\n\n\n\n\n\n\n6.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n6.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n6.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n6.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n6.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using .geom_point()\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n6.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both and .geom_boxplot()geom_point()\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7 Essential Grammatical Elements in ggplot2: stat",
    "text": "7 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a function and override the default geom, orstat_()\nadd a function and override the default stat.geom_()\n\n\n\n7.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n7.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)  \n\n\n\n\n\n\n\n7.3 Working with stat - the methodgeom()\nThe code chunk below adding mean values by using function and overriding the default stat.geom_()\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)              \n\n\n\n\n\n\n\n7.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "8 Essential Grammatical Elements in ggplot2: Facets",
    "text": "8 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n8.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using .facet-wrap()\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n8.2 functionfacet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using .facet_grid()\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "9 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "9 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\n\n\n\n\n\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n\n\n\n9.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using .coord_flip()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n9.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "10 Essential Grammatical Elements in ggplot2: themes",
    "text": "10 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - (default) - theme_gray()theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n10.1 Working with theme\nThe code chunk below plot a horizontal bar chart using .theme_gray()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\nA horizontal bar chart plotted using .theme_classic()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\nA horizontal bar chart plotted using .theme_minimal()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "11 Reference",
    "text": "11 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now you see it!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse\nhaven\n\nThe code chunk is as follows:\n\n\nCode\npacman::p_load(tidyverse,haven,dplyr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1: Now you see it!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse\nhaven\n\nThe code chunk is as follows:\n\n\nCode\npacman::p_load(tidyverse,haven,dplyr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "title": "In-class Exercise 1: Now you see it!",
    "section": "2 Importing PISA data",
    "text": "2 Importing PISA data\nThe code chunk below uses ‘read_sas()’ of haven to import PISA data into R environment.\n\n\nCode\nstu_qqq &lt;- haven::read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\n\n\nCode\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\n\n\nCode\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\n\n\nCode\nstu_qqq_SG &lt;-\n  read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "index.html#hands-on-exercise",
    "href": "index.html#hands-on-exercise",
    "title": "Visual Analytics and Applications",
    "section": "Hands On Exercise",
    "text": "Hands On Exercise\n\n\n\n\n\n\n\n\n\nHands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods\n\n\n\nCai Jingheng\n\n\nJan 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 2: Beyond ggplot2 Fundamentals\n\n\n\nCai Jingheng\n\n\nJan 14, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 3A: Programming Interactive Data Visualisation with R\n\n\n\nCai Jingheng\n\n\nJan 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 3B:Programming Animated Statistical Graphics with R\n\n\n\nCai Jingheng\n\n\nJan 22, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#in-class-exercise",
    "href": "index.html#in-class-exercise",
    "title": "Visual Analytics and Applications",
    "section": "In Class Exercise",
    "text": "In Class Exercise\n\n\n\n\n\n\n\n\n\nIn-class Exercise 1: Now you see it!\n\n\n\nCai Jingheng\n\n\nJan 13, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#take-home-exercise",
    "href": "index.html#take-home-exercise",
    "title": "Visual Analytics and Applications",
    "section": "Take Home Exercise",
    "text": "Take Home Exercise\n\n\n\n\n\n\n\n\n\nTake-home Exercise 1: Creating data visualisation beyond default\n\n\n\nCai Jingheng\n\n\nJan 14, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly belief that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-r-packages",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse\nhaven\n\nThe code chunk is as follows:\n\n\nCode\npacman::p_load(tidyverse,haven,dplyr,plotly,ggrepel, patchwork, \n               ggthemes, hrbrthemes\n               )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-pisa-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-pisa-data",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "2 Importing PISA data",
    "text": "2 Importing PISA data\nThe code chunk below uses ‘read_sas()’ of haven to import PISA data into R environment.\n\n\nCode\nstu_qqq &lt;- haven::read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\n\n\nCode\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\n\n\nCode\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\n\n\nCode\nstu_qqq_SG &lt;-\n  read_rds(\"data/stu_qqq_SG.rds\")\n\n\nST251Q06JA”How many of these items are there at your [home]: Musical instruments (e.g. guitar, piano)\n\nST250Q01JA: “Do the student have a room of his/her own”\n\n\n\nCode\nPV &lt;- stu_qqq_SG %&gt;%\n  mutate(\n    Math_Score = rowMeans(select(., starts_with(\"PV1MATH\"), starts_with(\"PV2MATH\"), starts_with(\"PV3MATH\"), starts_with(\"PV4MATH\"), starts_with(\"PV5MATH\"), starts_with(\"PV6MATH\"), starts_with(\"PV7MATH\"), starts_with(\"PV8MATH\"), starts_with(\"PV9MATH\"), starts_with(\"PV10MATH\")), na.rm = TRUE),\n    Reading_Score = rowMeans(select(., starts_with(\"PV1READ\"), starts_with(\"PV2READ\"), starts_with(\"PV3READ\"), starts_with(\"PV4READ\"), starts_with(\"PV5READ\"), starts_with(\"PV6READ\"), starts_with(\"PV7READ\"), starts_with(\"PV8READ\"), starts_with(\"PV9READ\"), starts_with(\"PV10READ\")), na.rm = TRUE),\n    Science_Score = rowMeans(select(., starts_with(\"PV1SCIE\"), starts_with(\"PV2SCIE\"), starts_with(\"PV3SCIE\"), starts_with(\"PV4SCIE\"), starts_with(\"PV5SCIE\"), starts_with(\"PV6SCIE\"), starts_with(\"PV7SCIE\"), starts_with(\"PV8SCIE\"), starts_with(\"PV9SCIE\"), starts_with(\"PV10SCIE\")), na.rm = TRUE),\n    Total_Score = Math_Score + Reading_Score + Science_Score\n  ) %&gt;%\n  \n  select(ST004D01T, CNTSCHID, CNTSTUID, Math_Score, Reading_Score, Science_Score, Total_Score,ST250Q01JA,ST251Q06JA)\n\n\n\n\nCode\nsummary(PV)\n\n\n   ST004D01T        CNTSCHID           CNTSTUID          Math_Score   \n Min.   :1.000   Min.   :70200001   Min.   :70200001   Min.   :262.6  \n 1st Qu.:1.000   1st Qu.:70200040   1st Qu.:70201836   1st Qu.:506.2  \n Median :2.000   Median :70200081   Median :70203674   Median :582.4  \n Mean   :1.508   Mean   :70200082   Mean   :70203673   Mean   :574.0  \n 3rd Qu.:2.000   3rd Qu.:70200123   3rd Qu.:70205513   3rd Qu.:648.4  \n Max.   :2.000   Max.   :70200165   Max.   :70207345   Max.   :842.7  \n                                                                      \n Reading_Score   Science_Score    Total_Score       ST250Q01JA   \n Min.   :158.6   Min.   :242.0   Min.   : 680.9   Min.   :1.000  \n 1st Qu.:477.4   1st Qu.:498.9   1st Qu.:1483.9   1st Qu.:1.000  \n Median :553.6   Median :571.2   Median :1708.5   Median :1.000  \n Mean   :542.5   Mean   :561.0   Mean   :1677.4   Mean   :1.377  \n 3rd Qu.:616.1   3rd Qu.:629.3   3rd Qu.:1888.5   3rd Qu.:2.000  \n Max.   :797.6   Max.   :801.9   Max.   :2369.7   Max.   :2.000  \n                                                  NA's   :66     \n   ST251Q06JA   \n Min.   :1.000  \n 1st Qu.:1.000  \n Median :2.000  \n Mean   :2.216  \n 3rd Qu.:3.000  \n Max.   :4.000  \n NA's   :47     \n\n\n\n\nCode\nPV &lt;- PV %&gt;%\n  mutate(Gender = ifelse(ST004D01T == 1,  \"Female\", \"Male\"),\n         Own_Room = ifelse(ST250Q01JA ==1 , \"Yes\" , \"No\"))\n\n\n\n\nCode\nPV  &lt;- na.omit(PV)\n\n\n\n\nCode\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Reading scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Science scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Total scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot1 + plot2 + plot3 + plot4\n\n\n\n\n\n\n\nCode\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score, fill = Gender)) +\n  geom_density(alpha = 0.5, position = \"identity\", stat = \"Density\") +\n  labs(title = \"Math Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score, fill = Gender)) +\n  geom_density(alpha = 0.5, position = \"identity\", stat = \"Density\") +\n  labs(title = \"Reading Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score, fill = Gender)) +\n  geom_density(alpha = 0.5, position = \"identity\", stat = \"Density\") +\n  labs(title = \"Science Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score, fill = Gender)) +\n  geom_density(alpha = 0.5, position = \"identity\", stat = \"density\") +\n  labs(title = \"Total Scores by Gender\") + \n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\ncombined_plots &lt;- plot1 + plot2 + plot3 + plot4\ncombined_plots\n\n\n\n\n\n\n\nCode\nSchool_Avg_Scores &lt;- PV %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Avg_Math_Score = mean(Math_Score, na.rm = TRUE),\n    Avg_Reading_Score = mean(Reading_Score, na.rm = TRUE),\n    Avg_Science_Score = mean(Science_Score, na.rm = TRUE),\n    Avg_Score = mean(Total_Score/3, na.rm = TRUE)\n  )\nSchool_Avg_Scores_subjects &lt;- School_Avg_Scores %&gt;%\n  select(CNTSCHID, starts_with(\"Avg_Math\"), starts_with(\"Avg_Reading\"), starts_with(\"Avg_Science\"),starts_with(\"Avg_Score\"))\nSchool_Avg_Scores_long &lt;- School_Avg_Scores_subjects %&gt;%\n  pivot_longer(cols = -CNTSCHID, names_to = \"Subject\", values_to = \"Score\")\n\n\n\n\nCode\n# Select the top three and bottom two schools for each subject based on average scores\noutliers_data &lt;- School_Avg_Scores %&gt;%\n  pivot_longer(cols = starts_with(\"Avg_\"), names_to = \"Subject\", values_to = \"Score\") %&gt;%\n  group_by(Subject) %&gt;%\n  arrange(Score) %&gt;%\n  slice(c(1:2, (n() - 1):(n())))\n\n# Create a boxplot and label the schools on the boxplot\nggplot(School_Avg_Scores_long, aes(x = Subject, y = Score, fill = Subject)) +\n  geom_boxplot(fill = \"#1696d2\") +\n  geom_text_repel(data = outliers_data, aes(label = as.character(CNTSCHID)), \n                  position = position_dodge(width = 1), \n                  box.padding = 0.8, \n                  force = 1, \n                  segment.color = \"grey50\", \n                  size = 2) +  # Use ggrepel's geom_text_repel\n  labs(title = \"Boxplot of Average Scores for Each Subject\", x = \"\", y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\nCode\nplot_math &lt;- ggplot(data=PV, aes(x=ST251Q06JA, y=Math_Score)) +\n  geom_point(color=\"#1696d2\") +\n  geom_smooth(method=lm, size=0.5,color = \"orange\") +\n  labs(title =\"Math Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_reading &lt;- ggplot(data=PV, aes(x=ST251Q06JA, y=Reading_Score)) +\n  geom_point(color=\"#1696d2\") +\n  geom_smooth(method=lm, size=0.5,color = \"orange\") +\n  labs(title =\"Reading Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_science &lt;- ggplot(data=PV, aes(x=ST251Q06JA, y=Science_Score)) +\n  geom_point(color=\"#1696d2\") +\n  geom_smooth(method=lm, size=0.5,color = \"orange\") +\n  labs(title =\"Science Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_total &lt;- ggplot(data=PV, aes(x=ST251Q06JA, y=Total_Score)) +\n  geom_point(color=\"#1696d2\") +\n  geom_smooth(method=lm, size=0.5,color = \"orange\") +\n  labs(title =\"Total Score by Musical instruments\", x = \"\", y = \"\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot &lt;- plot_math + plot_reading + plot_science + plot_total\ncombined_plot\n\n\n\n\n\n\n\nCode\np1 &lt;- ggplot(data = PV, aes(x =Math_Score , y = Own_Room)) +\n        geom_boxplot(fill = \"#1696d2\") +\n        labs(title =\"Math Score by Private Space\",x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\np2 &lt;- ggplot(data = PV, aes(x =Reading_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#1696d2\") +\n     \n        labs(title =\"Reading Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n  \np3 &lt;- ggplot(data = PV, aes(x = Science_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#1696d2\") +\n       \n        labs(title =\"Science Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))  \n\np4 &lt;- ggplot(data = PV, aes(x = Total_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#1696d2\") +\n       \n        labs(title =\"Total Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot&lt;- p1 + p2 + p3 + p4\ncombined_plot"
  },
  {
    "objectID": "lastest_submission_index.html",
    "href": "lastest_submission_index.html",
    "title": "Latest Submission",
    "section": "",
    "text": "In-class Exercise 1: Now you see it!\n\n\n1 min\n\n\n\nCai Jingheng\n\n\nJan 13, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 1: Creating data visualisation beyond default\n\n\n1 min\n\n\n\nCai Jingheng\n\n\nJan 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods\n\n\n15 min\n\n\n\nCai Jingheng\n\n\nJan 9, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "latest_submission_index.html",
    "href": "latest_submission_index.html",
    "title": "Latest Submission",
    "section": "",
    "text": "Hands-on Exercise 3B:Programming Animated Statistical Graphics with R\n\n\n3 min\n\n\n\nCai Jingheng\n\n\nJan 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 3A: Programming Interactive Data Visualisation with R\n\n\n28 min\n\n\n\nCai Jingheng\n\n\nJan 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTake-home Exercise 1: Creating data visualisation beyond default\n\n\n16 min\n\n\n\nCai Jingheng\n\n\nJan 14, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#latest-submission",
    "href": "index.html#latest-submission",
    "title": "Visual Analytics and Applications",
    "section": "Latest Submission",
    "text": "Latest Submission\n\n\n\n\n\n  \n\n\n\n\nTake Home Exercise 1: Creating data visualisation beyond default\n\n\n\n\n\n\n\n\n\nJan 14, 2024\n\n\nCai Jingheng\n\n\n\n\n\n\n  \n\n\n\n\nIn-class Exercise 1: Now you see it!\n\n\n\n\n\n\n\n\n\nJan 13, 2024\n\n\nCai Jingheng\n\n\n\n\n\n\n  \n\n\n\n\nHands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods\n\n\n\n\n\n\n\n\n\nJan 9, 2024\n\n\nCai Jingheng\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, I will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By this exercise, I will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, I will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By this exercise, I will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2 Getting started",
    "text": "2 Getting started\n\n2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\n\nCode\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n2.2 Importing data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "3 Beyond ggplot2 Annotation: ggrepel",
    "text": "3 Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n   # Add a linear regression line\n  geom_smooth(method = lm, size = 0.5) +\n  \n  # Add labels for each point with their ID\n  geom_label(aes(label = ID), hjust = 0.5, vjust = -0.5) +\n  \n  # Set the coordinate limits for x and y axes\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\n\nWe simply replace  geom_text()  by  geom_text_repel()  and  geom_label()  by   geom_label_repel.\n\n3.1 Working with ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  # Add repelling labels for each point with their ID\n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\nWhat I learned\n\n\n\nWe can see that geom_label() places labels at specified coordinates without considering overlap, while geom_label_repel() automatically adjusts label positions to avoid overlap, resulting in a cleaner and more readable plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4 Beyond ggplot2 Themes",
    "text": "4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"blue\", \n                 fill=\"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\") +\ntheme_light()\n\n\n\n\n\n\n\n\n\n\n\nWhat I did\n\n\n\nIn this part, I try to change the colour to “blue” and the fill to “#3459e6” as well as the theme to “theme_light”.\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, I try to use Fivethirtyeight theme.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"blue\", \n                 fill=\"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_fivethirtyeight()\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"blue\", \n                 fill=\"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data,               aes(x = MATHS)) +   geom_histogram(bins=20,                   boundary = 100,                  color=\"blue\",                   fill=\"#3459e6\") +   ggtitle(\"Distribution of Maths scores\") +      theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5 Beyond Single Graph",
    "text": "5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\np1 &lt;- ggplot(data=exam_data,               \n           aes(x = MATHS)) +   \n      geom_histogram(bins=20,                   \n                     boundary = 100,                  \n                     color=\"blue\",                   \n                     fill=\"#3459e6\") +   \n      ggtitle(\"Distribution of Maths scores\") +        \n      coord_cartesian(xlim=c(0,100)) \n\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\np2 &lt;-  ggplot(data=exam_data,               \n              aes(x = ENGLISH)) +   \n  geom_histogram(bins=20,                   \n                 boundary = 100,                  \n                 color=\"blue\",                   \n                 fill=\"#3459e6\") +   \n  ggtitle(\"Distribution of English scores\") +          \n  coord_cartesian(xlim=c(0,100)) \n\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point(color = \"#3459e6\") +\n  geom_smooth(method=lm, \n              size=0.5,\n              color = \"blue\") +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\nWhat I did\n\n\n\nIn this part, I try to change the smooth’s color to “blue” and the point’s color to “#3459e6”.\n\n\n\n5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\np1 + p2\n\n\n\n\n\n\n\n5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n\nCode\n(p1 / p2) | p3\n\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n\nCode\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "6 Reference",
    "text": "6 Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly belief that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objective",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objective",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "2 Objective",
    "text": "2 Objective\nIn this exploratory data analysis (EDA) exercise, the primary objectives are to employ suitable methods and ggplot2 functions for the following:\n\nUncover the Distribution of Student Performance:\nExplore and visualize the distribution of Singaporean students’ performance in mathematics, reading, and science. Utilize ggplot2 functions to create informative and insightful visualizations that highlight patterns and variations in student scores across these subjects.\nExamine the Relationship Between Performance and School, Gender, and Socioeconomic Status:\nInvestigate and illustrate the connections between students’ academic performances in mathematics, reading, and science with respect to different factors such as schools, gender, and socioeconomic status (e.g. owning their own home, number of musical instruments). Leverage ggplot2 to create meaningful plots that facilitate a comprehensive understanding of these relationships."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "3 Data Preparation",
    "text": "3 Data Preparation\n\n3.1 Loading R packages\nIn this hands-on exercise, two R packages will be used. They are:\n\ntidyverse: An ecosystem of R packages, including dplyr, ggplot2, tidyr, and others, designed to work together seamlessly for data manipulation and visualization.\nhaven: A package for reading and writing data in various formats, including SAS, SPSS, and Stata.\ndplyr: A powerful package for data manipulation, providing functions like filter(), select(), mutate(), and summarise().\nplotly: A versatile package for creating interactive and dynamic plots, suitable for use in web applications.\nggrepel: An extension of ggplot2 that adds the ability to automatically adjust and repel text labels to avoid overlapping.\npatchwork: A package for combining multiple ggplot2 plots into a single plot.\nggthemes: Additional themes and color scales for use with ggplot2, allowing customization of the appearance of plots.\nhrbrthemes: A collection of themes and color palettes for use with ggplot2, created by Hadley Wickham.\n\nThe code chunk is as follows:\n\npacman::p_load(tidyverse,haven,dplyr,plotly,ggrepel, patchwork, \n               ggthemes, hrbrthemes)\n\n\n\n3.2 Importing PISA data\nThe code chunk below uses ‘read_sas()’ of haven to import PISA data into R environment.\n\nstu_qqq &lt;- haven::read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nFor this exercise, we only need to analyse the Singapore region, and the following code is used to filter the students in Singapore.\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\nNext, we save the filtered data as a new data file to promote running efficiency.\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;-\n  read_rds(\"data/stu_qqq_SG.rds\")\n\nThe dataset has 1279 variables and 6606 observations. In preparation for visual analysis, the following code collates the relevant variables and integrates them into the PV dataset:\n\n# Create a new dataset PV by extracting relevant variables from stu_qqq_SG\nPV &lt;- stu_qqq_SG %&gt;%\n  mutate(\n    Math_Score = rowMeans(select(., starts_with(\"PV1MATH\"), starts_with(\"PV2MATH\"), starts_with(\"PV3MATH\"), starts_with(\"PV4MATH\"), starts_with(\"PV5MATH\"), starts_with(\"PV6MATH\"), starts_with(\"PV7MATH\"), starts_with(\"PV8MATH\"), starts_with(\"PV9MATH\"), starts_with(\"PV10MATH\")), na.rm = TRUE),\n    Reading_Score = rowMeans(select(., starts_with(\"PV1READ\"), starts_with(\"PV2READ\"), starts_with(\"PV3READ\"), starts_with(\"PV4READ\"), starts_with(\"PV5READ\"), starts_with(\"PV6READ\"), starts_with(\"PV7READ\"), starts_with(\"PV8READ\"), starts_with(\"PV9READ\"), starts_with(\"PV10READ\")), na.rm = TRUE),\n    Science_Score = rowMeans(select(., starts_with(\"PV1SCIE\"), starts_with(\"PV2SCIE\"), starts_with(\"PV3SCIE\"), starts_with(\"PV4SCIE\"), starts_with(\"PV5SCIE\"), starts_with(\"PV6SCIE\"), starts_with(\"PV7SCIE\"), starts_with(\"PV8SCIE\"), starts_with(\"PV9SCIE\"), starts_with(\"PV10SCIE\")), na.rm = TRUE),\n    Total_Score = Math_Score + Reading_Score + Science_Score,\n    Gender = ifelse(ST004D01T == 1,  \"Female\", \"Male\"),\n    Own_Room = ifelse(ST250Q01JA == 1, \"Yes\" , \"No\"),\n    mi_num = ST251Q06JA\n  ) %&gt;%\n  select(CNTSCHID, CNTSTUID, Math_Score, Reading_Score, Science_Score, Total_Score, Gender, Own_Room, mi_num)\n\nIn the following code we check the dataset using “str”:\n\nstr(PV)\n\ntibble [6,606 × 9] (S3: tbl_df/tbl/data.frame)\n $ CNTSCHID     : num [1:6606] 70200052 70200134 70200112 70200004 70200152 ...\n  ..- attr(*, \"label\")= chr \"Intl. School ID\"\n $ CNTSTUID     : num [1:6606] 70200001 70200002 70200003 70200004 70200005 ...\n  ..- attr(*, \"label\")= chr \"Intl. Student ID\"\n $ Math_Score   : num [1:6606] 605 690 677 401 436 ...\n $ Reading_Score: num [1:6606] 667 628 583 361 476 ...\n $ Science_Score: num [1:6606] 640 672 660 344 479 ...\n $ Total_Score  : num [1:6606] 1912 1990 1920 1106 1391 ...\n $ Gender       : chr [1:6606] \"Female\" \"Male\" \"Male\" \"Male\" ...\n $ Own_Room     : chr [1:6606] \"No\" \"Yes\" \"Yes\" \"No\" ...\n $ mi_num       : num [1:6606] 3 4 2 2 1 2 2 3 4 1 ...\n  ..- attr(*, \"label\")= chr \"How many of these items are there at your [home]: Musical instruments (e.g. guitar, piano, [country-specific example])\"\n\n\nThe following code converts school ID and student ID from numeric values to characters:\n\nPV$CNTSCHID &lt;- as.character(PV$CNTSCHID)\nPV$CNTSCHID &lt;- as.character(PV$CNTSTUID)\n\nIn the last step, the following code is used to clear the missing values:\n\nPV &lt;- na.omit(PV)\n\n\n\n3.3 Variables Description\n\n\n\n\n\n\n\nVariables\nDescription\n\n\n\n\nCNTSCHID\nSchool ID, uniquely identifying each school\n\n\nCNTSTUID\nStudent ID, uniquely identifying each student\n\n\nMath_Score\nAverage math score computed from ten different tests for each student\n\n\nReading_Score\nAverage reading score computed from ten different tests for each student\n\n\nScience_Score\nAverage science score computed from ten different tests for each student\n\n\nTotal_Score\nOverall average score computed as the sum of math, reading, and science scores\n\n\nGender\nCategorical variable indicating the gender of the student (either “Male” or “Female”)\n\n\nOwn_Room\nBinary variable indicating whether the student has their own room (“Yes” or “No”)\n\n\nmi_num\nNumeric variable representing the number of musical instruments at the student’s home"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "4 Exploratory Data Analysis",
    "text": "4 Exploratory Data Analysis\n\n4.1 Distribution of Student Performance\nThe following code plots histograms of maths, reading, science, and total score scores to observe the distribution of student performance:\n\n\nCode\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Reading scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Science scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Total scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot1 + plot2 + plot3 + plot4\n\n\n\n\n\n\n\n\n\n\n\nInsights from Visualisations\n\n\n\nThe histograms of Math, Reading, Science, and Total scores reveal a right-skewed distribution indicating that the median surpasses the mean.\n\n\n\n\n4.2 Student Performance by Gender\nThe following code generates density plots to compare the distribution of academic performance between students of different genders, providing a comprehensive understanding of the gender differences in academic achievement.\n\n\nCode\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"density\") +  \n   scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Math Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent) +\n  theme_minimal() +\n  theme(text = element_text(size = 8), plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"Density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Reading Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"Density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Science Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Total Scores by Gender\") + \n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\ncombined_plots &lt;- plot1 + plot2 + plot3 + plot4 +\n  plot_layout(guides = \"collect\")\n\ncombined_plots\n\n\n\n\n\n\n\n\n\n\n\nInsights from Visualisations\n\n\n\n\nMathematics: The performance distribution in mathematics is similar for both males and females, but males have a slight edge in math scores.\nReading: Females have a slight advantage in reading scores compared to males, with males having a slightly lower distribution of scores.\nScience: The distribution of science scores is similar for males and females, but males tend to have slightly higher scores.\nTotal Score: The overall performance distribution in total scores is similar for males and females, with no significant gender differences.\n\n\n\n\n\n4.3 Student Performance by School\nThe following code calculates the maths, reading, and science, as well as the average grades in these three subjects for each school’s students, and synthesises a new dataset for graphing in the next step.\n\n\nCode\nSchool_Avg_Scores &lt;- PV %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Avg_Math_Score = mean(Math_Score, na.rm = TRUE),\n    Avg_Reading_Score = mean(Reading_Score, na.rm = TRUE),\n    Avg_Science_Score = mean(Science_Score, na.rm = TRUE),\n    Avg_Score = mean(Total_Score/3, na.rm = TRUE)\n  )\nSchool_Avg_Scores_subjects &lt;- School_Avg_Scores %&gt;%\n  select(CNTSCHID, starts_with(\"Avg_Math\"), starts_with(\"Avg_Reading\"), starts_with(\"Avg_Science\"),starts_with(\"Avg_Score\"))\nSchool_Avg_Scores_long &lt;- School_Avg_Scores_subjects %&gt;%\n  pivot_longer(cols = -CNTSCHID, names_to = \"Subject\", values_to = \"Score\")\n\n\nThe following code draws box plots showing the distribution of school average scores in each subject, with text labels identifying the four highest-scoring schools and the two lowest-scoring schools in each subject.\n\n\nCode\noutliers_data &lt;- School_Avg_Scores %&gt;%\n  pivot_longer(cols = starts_with(\"Avg_\"), names_to = \"Subject\", values_to = \"Score\") %&gt;%\n  group_by(Subject) %&gt;%\n  arrange(Score) %&gt;%\n  slice(c(1:2, (n() - 3):(n())))\n\nggplot(School_Avg_Scores_long, aes(x = Subject, y = Score, fill = Subject)) +\n  geom_boxplot(fill = \"#3459e6\") +\n  geom_text_repel(data = outliers_data, aes(label = CNTSCHID), \n                  position = position_dodge(width = 1), \n                  box.padding = 0.8, \n                  force = 1, \n                  segment.color = \"grey50\", \n                  size = 2) +  # Use ggrepel's geom_text_repel\n  labs(title = \"Boxplot of Average Scores for Each Subject\", x = \"\", y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\n\nInsights from Visualisations\n\n\n\n\nThe variation in subject and average scores across schools is very wide, with the top performing schools able to have an average score of about 800 per subject. However, schools at the bottom end of the scale have less than 300, and even less than 200 in reading.\nStudents from two schools, 70201256 and 70201120, had top average performance in two of the three subjects and top average scores per subject.\nStudents from two schools, 70205525 and 70202489, performed poorly.\nSome schools had students who were at the top in individual subjects but did not rank very high in the overall rankings, suggesting that these schools were better educated in certain individual subjects, e.g., 70205185 in reading.\n\n\n\n\n\n4.4 Student Performance by Musical Instruments\nThe following code shows scatter plots of students’ maths, reading, science and overall performance against the number of musical instruments owned, as well as showing the relationship by fitting a line through linear regression.\n\n\nCode\nplot_math &lt;- ggplot(data=PV, aes(x=mi_num, y=Math_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Math Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_reading &lt;- ggplot(data=PV, aes(x=mi_num, y=Reading_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Reading Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_science &lt;- ggplot(data=PV, aes(x=mi_num, y=Science_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Science Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_total &lt;- ggplot(data=PV, aes(x=mi_num, y=Total_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Total Score by Musical instruments\", x = \"\", y = \"\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot &lt;- plot_math + plot_reading + plot_science + plot_total\ncombined_plot\n\n\n\n\n\n\n\n\n\n\n\nInsights from Visualisations\n\n\n\nAs can be seen by the graph, the linear regression fit line is slightly upward, suggesting that students with more musical equipment in this dataset are likely to trend better in maths, reading, science, and overall performance in general.\n\n\n\n\n4.5 Student Performance by Own room\nThe following code plots box-and-line graphs to compare student performance in maths, reading, science and overall scores by whether or not they had the room to themselves.\n\n\nCode\np1 &lt;- ggplot(data = PV, aes(x =Math_Score , y = Own_Room)) +\n        geom_boxplot(fill = \"#3459e6\") +\n        labs(title =\"Math Score by Private Space\",x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\np2 &lt;- ggplot(data = PV, aes(x =Reading_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n     \n        labs(title =\"Reading Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n  \np3 &lt;- ggplot(data = PV, aes(x = Science_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n       \n        labs(title =\"Science Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))  \n\np4 &lt;- ggplot(data = PV, aes(x = Total_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n       \n        labs(title =\"Total Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot&lt;- p1 + p2 + p3 + p4\ncombined_plot\n\n\n\n\n\n\n\n\n\n\n\nInsights from Visualisations\n\n\n\nFrom the box plot above, it is clear that students with their own rooms generally outperform students without their own rooms in maths, reading, science, and overall scores. This may be because a quiet, distraction-free environment helps students focus better on their studies, which in turn improves their academic performance."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "5 Conclusion",
    "text": "5 Conclusion\n\nThe distribution of students’ performance across subjects is right-skewed , indicating that the majority of students tend to have scores clustered towards the higher end of the scale, with a tail extending towards the lower scores.\nGender differences were observed, with males slightly excelling in mathematics, while females performed better in reading.\nSchool-level analysis showcased a wide performance variation, with some excelling in specific subjects.\nSocioeconomic factors like musical instruments and private spaces influenced scores positively. Students with more instruments tended to perform better, and those with private rooms consistently outperformed peers without."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#limitations",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#limitations",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "6 Limitations",
    "text": "6 Limitations\nHowever, it is essential to acknowledge certain limitations in our analysis. The exploration primarily relied on visualizations and graphical representations to uncover patterns and insights. While these visualizations offer a comprehensive overview of the data, they lack the precision and depth that statistical analysis methods could provide. For example, a linear regression fitting a line between the number of musical instruments owned and performance on maths, reading, science and overall grades would only provide a general trend in the relationship and would not establish causality. This trend is a preliminary observation, after which further exploration of the relationship between musical equipment and academic performance may require more in-depth statistical analyses that take into account additional variables and possible interactions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#learning-outcome",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#getting-started",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#importing-data",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "3 Importing Data",
    "text": "3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "4 Interactive Data Visualisation - ggiraph methods",
    "text": "4 Interactive Data Visualisation - ggiraph methods\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\",\n    color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal()\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n  \ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nWhat I did\n\n\n\nIn this part, I try to change the colour to “blue” and the fill to “#3459e6” as well as the theme to “theme_minimal()”.\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactivity",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "5 Interactivity",
    "text": "5 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student's ID will be displayed.\n\n\n\n\n\n\n\n5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\",\n    color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal()+\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n5.2 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color: lightgrey; border: 1px solid #ccc; border-radius: 5px; padding: 10px; font-family: 'Arial', sans-serif; font-size: 14px; font-weight: bold; color: black;\"\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",\n    color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal()+                \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n\n\n\n\nWhat I did\n\n\n\nIn this part, I try to set a lightgrey background color (lightgrey), a subtle gray border (#ccc), rounded corners with border-radius, padding for space (padding: 10px), and uses the ‘Roboto’ font as the primary font with a fallback to sans-serif. The font size is set to 14px, the text is bold (font-weight: bold), and the color is black (black).\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n5.3 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal()+\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n5.4 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely .data_id\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n5.5 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: darkblue;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nWhat I did\n\n\n\nIn this part, I try to change opts_hover css color to darkblue.\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n5.6 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() +                    \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: darkblue;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                                            \n\n\n\n\n\n\n\n5.7 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of .onclick\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n5.8 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: darkblue;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "6 3.7 Interactive Data Visualisation - plotly methods!",
    "text": "6 3.7 Interactive Data Visualisation - plotly methods!\nPlotly's R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n6.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n6.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe PlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n6.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1, color = \"blue\",\n    fill=\"#3459e6\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\n6.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe PlotCode\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1,color = \"blue\",\n    fill=\"#3459e6\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1,color = \"blue\",\n    fill=\"#3459e6\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "7 Interactive Data Visualisation - crosstalk methods!",
    "text": "7 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n7.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library 'DataTables' (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n7.2 Linked brushing: crosstalk method\n\nThe PlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1,color = \"blue\",     fill=\"#3459e6\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#reference",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "8 Reference",
    "text": "8 Reference\n\n8.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n8.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly's R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n2  Beyond ggplot2 Fundamentals\n4  Programming Animated Statistical Graphics with R"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html",
    "title": "Hands-on Exercise 3B:Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it's important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#overview",
    "title": "Hands-on Exercise 3B:Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it's important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#getting-started",
    "title": "Hands-on Exercise 3B:Programming Animated Statistical Graphics with R",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant's fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family."
  }
]