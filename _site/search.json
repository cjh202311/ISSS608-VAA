[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Applications",
    "section": "",
    "text": "In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "2 Introducing ggplot",
    "text": "2 Introducing ggplot\nggplot2 is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics\n\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\nFor more detail, visit ggplot2 link.\n\n\n2.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\n\nCode\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\nWhy ggplot2 is recommended?\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3 Grammar of Graphics",
    "text": "3 Grammar of Graphics\nBefore we getting started using ggplot2, it is important for us to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\nWhat is a statistical graphic?\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n3.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "4 Essential Grammatical Elements in ggplot2: data",
    "text": "4 Essential Grammatical Elements in ggplot2: data\nLet us call the function using the code chunk on the right.ggplot()\n\n\nCode\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by .fortify()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "5 Essential Grammatical Elements in ggplot2: Aesthetic mappings",
    "text": "5 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "6 Essential Grammatical Elements in ggplot2: geom",
    "text": "6 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n6.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n6.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n6.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n6.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20\nfill argument is used to shade the histogram with light blue color\ncolor argument is used to change the outline colour of the bars in black\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"lightblue\")  \n\n\n\n\n\n\n\n6.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n6.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n6.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n6.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n6.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using .geom_point()\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n6.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both and .geom_boxplot()geom_point()\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "7 Essential Grammatical Elements in ggplot2: stat",
    "text": "7 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a function and override the default geom, orstat_()\nadd a function and override the default stat.geom_()\n\n\n\n7.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n7.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)  \n\n\n\n\n\n\n\n7.3 Working with stat - the methodgeom()\nThe code chunk below adding mean values by using function and overriding the default stat.geom_()\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)              \n\n\n\n\n\n\n\n7.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "8 Essential Grammatical Elements in ggplot2: Facets",
    "text": "8 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n8.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using .facet-wrap()\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n8.2 functionfacet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using .facet_grid()\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "9 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "9 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\n\n\n\n\n\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n\n\n\n9.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using .coord_flip()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n9.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "10 Essential Grammatical Elements in ggplot2: themes",
    "text": "10 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - (default) - theme_gray()theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n10.1 Working with theme\nThe code chunk below plot a horizontal bar chart using .theme_gray()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\nA horizontal bar chart plotted using .theme_classic()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\nA horizontal bar chart plotted using .theme_minimal()\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "11 Reference",
    "text": "11 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now you see it!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse\nhaven\n\nThe code chunk is as follows:\n\n\nCode\npacman::p_load(tidyverse,haven,dplyr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1: Now you see it!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse\nhaven\n\nThe code chunk is as follows:\n\n\nCode\npacman::p_load(tidyverse,haven,dplyr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "title": "In-class Exercise 1: Now you see it!",
    "section": "2 Importing PISA data",
    "text": "2 Importing PISA data\nThe code chunk below uses ‘read_sas()’ of haven to import PISA data into R environment.\n\n\nCode\nstu_qqq &lt;- haven::read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\n\n\nCode\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\n\n\nCode\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\n\n\nCode\nstu_qqq_SG &lt;-\n  read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "index.html#hands-on-exercise",
    "href": "index.html#hands-on-exercise",
    "title": "Visual Analytics and Applications",
    "section": "Hands On Exercise",
    "text": "Hands On Exercise\n\n\n\n\n\n\n\n\n\nHands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods\n\n\n\nCai Jingheng\n\n\nJan 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 2: Beyond ggplot2 Fundamentals\n\n\n\nCai Jingheng\n\n\nJan 14, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 3A: Programming Interactive Data Visualisation with R\n\n\n\nCai Jingheng\n\n\nJan 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 3B: Programming Animated Statistical Graphics with R\n\n\n\nCai Jingheng\n\n\nJan 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 4A: Visualising Distribution\n\n\n\nCai Jingheng\n\n\nJan 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 4B: Visual Statistical Analysis\n\n\n\nCai Jingheng\n\n\nJan 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 4C: Visualising Uncertainty\n\n\n\nCai Jingheng\n\n\nJan 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 4D: Funnel Plots for Fair Comparisons\n\n\n\nCai Jingheng\n\n\nJan 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5A: Creating Ternary Plot with R\n\n\n\nCai Jingheng\n\n\nFeb 3, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5B: Visual Correlation Analysis\n\n\n\nCai Jingheng\n\n\nFeb 3, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data\n\n\n\nCai Jingheng\n\n\nFeb 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot\n\n\n\nCai Jingheng\n\n\nFeb 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5E: Treemap Visualisation with R\n\n\n\nCai Jingheng\n\n\nFeb 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 6: Visualising and Analysing Time-oriented Data\n\n\n\nCai Jingheng\n\n\nFeb 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 7A: Choropleth Mapping with R\n\n\n\nCai Jingheng\n\n\nFeb 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 7B: Visualising Geospatial Point Data\n\n\n\nCai Jingheng\n\n\nFeb 24, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#in-class-exercise",
    "href": "index.html#in-class-exercise",
    "title": "Visual Analytics and Applications",
    "section": "In Class Exercise",
    "text": "In Class Exercise\n\n\n\n\n\n\n\n\n\nHorizon Plot\n\n\n\nCai Jingheng\n\n\nFeb 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Exercise 1: Now you see it!\n\n\n\nCai Jingheng\n\n\nJan 13, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#take-home-exercise",
    "href": "index.html#take-home-exercise",
    "title": "Visual Analytics and Applications",
    "section": "Take Home Exercise",
    "text": "Take Home Exercise\n\n\n\n\n\n\n\n\n\nTake Home Exercise 3: Be Weatherwise or Otherwise\n\n\n\nCai Jingheng\n\n\nFeb 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTake-home Exercise 1: Creating data visualisation beyond default\n\n\n\nCai Jingheng\n\n\nJan 14, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTake-home Exercise 2: DataVis Makeover\n\n\n\nCai Jingheng\n\n\nJan 25, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly belief that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-r-packages",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse\nhaven\n\nThe code chunk is as follows:\n\n\nCode\npacman::p_load(tidyverse,haven,dplyr,plotly,ggrepel, patchwork, \n               ggthemes, hrbrthemes\n               )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-pisa-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-pisa-data",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "2 Importing PISA data",
    "text": "2 Importing PISA data\nThe code chunk below uses ‘read_sas()’ of haven to import PISA data into R environment.\n\n\nCode\nstu_qqq &lt;- haven::read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\n\n\nCode\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\n\n\nCode\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\n\n\nCode\nstu_qqq_SG &lt;-\n  read_rds(\"data/stu_qqq_SG.rds\")\n\n\nST251Q06JA”How many of these items are there at your [home]: Musical instruments (e.g. guitar, piano)\n\nST250Q01JA: “Do the student have a room of his/her own”\n\n\n\nCode\nPV &lt;- stu_qqq_SG %&gt;%\n  mutate(\n    Math_Score = rowMeans(select(., starts_with(\"PV1MATH\"), starts_with(\"PV2MATH\"), starts_with(\"PV3MATH\"), starts_with(\"PV4MATH\"), starts_with(\"PV5MATH\"), starts_with(\"PV6MATH\"), starts_with(\"PV7MATH\"), starts_with(\"PV8MATH\"), starts_with(\"PV9MATH\"), starts_with(\"PV10MATH\")), na.rm = TRUE),\n    Reading_Score = rowMeans(select(., starts_with(\"PV1READ\"), starts_with(\"PV2READ\"), starts_with(\"PV3READ\"), starts_with(\"PV4READ\"), starts_with(\"PV5READ\"), starts_with(\"PV6READ\"), starts_with(\"PV7READ\"), starts_with(\"PV8READ\"), starts_with(\"PV9READ\"), starts_with(\"PV10READ\")), na.rm = TRUE),\n    Science_Score = rowMeans(select(., starts_with(\"PV1SCIE\"), starts_with(\"PV2SCIE\"), starts_with(\"PV3SCIE\"), starts_with(\"PV4SCIE\"), starts_with(\"PV5SCIE\"), starts_with(\"PV6SCIE\"), starts_with(\"PV7SCIE\"), starts_with(\"PV8SCIE\"), starts_with(\"PV9SCIE\"), starts_with(\"PV10SCIE\")), na.rm = TRUE),\n    Total_Score = Math_Score + Reading_Score + Science_Score\n  ) %&gt;%\n  \n  select(ST004D01T, CNTSCHID, CNTSTUID, Math_Score, Reading_Score, Science_Score, Total_Score,ST250Q01JA,ST251Q06JA)\n\n\n\n\nCode\nsummary(PV)\n\n\n   ST004D01T        CNTSCHID           CNTSTUID          Math_Score   \n Min.   :1.000   Min.   :70200001   Min.   :70200001   Min.   :262.6  \n 1st Qu.:1.000   1st Qu.:70200040   1st Qu.:70201836   1st Qu.:506.2  \n Median :2.000   Median :70200081   Median :70203674   Median :582.4  \n Mean   :1.508   Mean   :70200082   Mean   :70203673   Mean   :574.0  \n 3rd Qu.:2.000   3rd Qu.:70200123   3rd Qu.:70205513   3rd Qu.:648.4  \n Max.   :2.000   Max.   :70200165   Max.   :70207345   Max.   :842.7  \n                                                                      \n Reading_Score   Science_Score    Total_Score       ST250Q01JA   \n Min.   :158.6   Min.   :242.0   Min.   : 680.9   Min.   :1.000  \n 1st Qu.:477.4   1st Qu.:498.9   1st Qu.:1483.9   1st Qu.:1.000  \n Median :553.6   Median :571.2   Median :1708.5   Median :1.000  \n Mean   :542.5   Mean   :561.0   Mean   :1677.4   Mean   :1.377  \n 3rd Qu.:616.1   3rd Qu.:629.3   3rd Qu.:1888.5   3rd Qu.:2.000  \n Max.   :797.6   Max.   :801.9   Max.   :2369.7   Max.   :2.000  \n                                                  NA's   :66     \n   ST251Q06JA   \n Min.   :1.000  \n 1st Qu.:1.000  \n Median :2.000  \n Mean   :2.216  \n 3rd Qu.:3.000  \n Max.   :4.000  \n NA's   :47     \n\n\n\n\nCode\nPV &lt;- PV %&gt;%\n  mutate(Gender = ifelse(ST004D01T == 1,  \"Female\", \"Male\"),\n         Own_Room = ifelse(ST250Q01JA ==1 , \"Yes\" , \"No\"))\n\n\n\n\nCode\nPV  &lt;- na.omit(PV)\n\n\n\n\nCode\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Reading scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Science scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Total scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot1 + plot2 + plot3 + plot4\n\n\n\n\n\n\n\nCode\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score, fill = Gender)) +\n  geom_density(alpha = 0.5, position = \"identity\", stat = \"Density\") +\n  labs(title = \"Math Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score, fill = Gender)) +\n  geom_density(alpha = 0.5, position = \"identity\", stat = \"Density\") +\n  labs(title = \"Reading Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score, fill = Gender)) +\n  geom_density(alpha = 0.5, position = \"identity\", stat = \"Density\") +\n  labs(title = \"Science Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score, fill = Gender)) +\n  geom_density(alpha = 0.5, position = \"identity\", stat = \"density\") +\n  labs(title = \"Total Scores by Gender\") + \n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\ncombined_plots &lt;- plot1 + plot2 + plot3 + plot4\ncombined_plots\n\n\n\n\n\n\n\nCode\nSchool_Avg_Scores &lt;- PV %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Avg_Math_Score = mean(Math_Score, na.rm = TRUE),\n    Avg_Reading_Score = mean(Reading_Score, na.rm = TRUE),\n    Avg_Science_Score = mean(Science_Score, na.rm = TRUE),\n    Avg_Score = mean(Total_Score/3, na.rm = TRUE)\n  )\nSchool_Avg_Scores_subjects &lt;- School_Avg_Scores %&gt;%\n  select(CNTSCHID, starts_with(\"Avg_Math\"), starts_with(\"Avg_Reading\"), starts_with(\"Avg_Science\"),starts_with(\"Avg_Score\"))\nSchool_Avg_Scores_long &lt;- School_Avg_Scores_subjects %&gt;%\n  pivot_longer(cols = -CNTSCHID, names_to = \"Subject\", values_to = \"Score\")\n\n\n\n\nCode\n# Select the top three and bottom two schools for each subject based on average scores\noutliers_data &lt;- School_Avg_Scores %&gt;%\n  pivot_longer(cols = starts_with(\"Avg_\"), names_to = \"Subject\", values_to = \"Score\") %&gt;%\n  group_by(Subject) %&gt;%\n  arrange(Score) %&gt;%\n  slice(c(1:2, (n() - 1):(n())))\n\n# Create a boxplot and label the schools on the boxplot\nggplot(School_Avg_Scores_long, aes(x = Subject, y = Score, fill = Subject)) +\n  geom_boxplot(fill = \"#1696d2\") +\n  geom_text_repel(data = outliers_data, aes(label = as.character(CNTSCHID)), \n                  position = position_dodge(width = 1), \n                  box.padding = 0.8, \n                  force = 1, \n                  segment.color = \"grey50\", \n                  size = 2) +  # Use ggrepel's geom_text_repel\n  labs(title = \"Boxplot of Average Scores for Each Subject\", x = \"\", y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\nCode\nplot_math &lt;- ggplot(data=PV, aes(x=ST251Q06JA, y=Math_Score)) +\n  geom_point(color=\"#1696d2\") +\n  geom_smooth(method=lm, size=0.5,color = \"orange\") +\n  labs(title =\"Math Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_reading &lt;- ggplot(data=PV, aes(x=ST251Q06JA, y=Reading_Score)) +\n  geom_point(color=\"#1696d2\") +\n  geom_smooth(method=lm, size=0.5,color = \"orange\") +\n  labs(title =\"Reading Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_science &lt;- ggplot(data=PV, aes(x=ST251Q06JA, y=Science_Score)) +\n  geom_point(color=\"#1696d2\") +\n  geom_smooth(method=lm, size=0.5,color = \"orange\") +\n  labs(title =\"Science Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_total &lt;- ggplot(data=PV, aes(x=ST251Q06JA, y=Total_Score)) +\n  geom_point(color=\"#1696d2\") +\n  geom_smooth(method=lm, size=0.5,color = \"orange\") +\n  labs(title =\"Total Score by Musical instruments\", x = \"\", y = \"\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot &lt;- plot_math + plot_reading + plot_science + plot_total\ncombined_plot\n\n\n\n\n\n\n\nCode\np1 &lt;- ggplot(data = PV, aes(x =Math_Score , y = Own_Room)) +\n        geom_boxplot(fill = \"#1696d2\") +\n        labs(title =\"Math Score by Private Space\",x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\np2 &lt;- ggplot(data = PV, aes(x =Reading_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#1696d2\") +\n     \n        labs(title =\"Reading Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n  \np3 &lt;- ggplot(data = PV, aes(x = Science_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#1696d2\") +\n       \n        labs(title =\"Science Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))  \n\np4 &lt;- ggplot(data = PV, aes(x = Total_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#1696d2\") +\n       \n        labs(title =\"Total Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot&lt;- p1 + p2 + p3 + p4\ncombined_plot"
  },
  {
    "objectID": "lastest_submission_index.html",
    "href": "lastest_submission_index.html",
    "title": "Latest Submission",
    "section": "",
    "text": "In-class Exercise 1: Now you see it!\n\n\n1 min\n\n\n\nCai Jingheng\n\n\nJan 13, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 1: Creating data visualisation beyond default\n\n\n1 min\n\n\n\nCai Jingheng\n\n\nJan 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods\n\n\n15 min\n\n\n\nCai Jingheng\n\n\nJan 9, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "latest_submission_index.html",
    "href": "latest_submission_index.html",
    "title": "Latest Submission",
    "section": "",
    "text": "Horizon Plot\n\n\n1 min\n\n\n\nCai Jingheng\n\n\nFeb 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 7B: Visualising Geospatial Point Data\n\n\n6 min\n\n\n\nCai Jingheng\n\n\nFeb 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 7A: Choropleth Mapping with R\n\n\n13 min\n\n\n\nCai Jingheng\n\n\nFeb 24, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#latest-submission",
    "href": "index.html#latest-submission",
    "title": "Visual Analytics and Applications",
    "section": "Latest Submission",
    "text": "Latest Submission\n\n\n\n\n\n  \n\n\n\n\nTake Home Exercise 1: Creating data visualisation beyond default\n\n\n\n\n\n\n\n\n\nJan 14, 2024\n\n\nCai Jingheng\n\n\n\n\n\n\n  \n\n\n\n\nIn-class Exercise 1: Now you see it!\n\n\n\n\n\n\n\n\n\nJan 13, 2024\n\n\nCai Jingheng\n\n\n\n\n\n\n  \n\n\n\n\nHands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods\n\n\n\n\n\n\n\n\n\nJan 9, 2024\n\n\nCai Jingheng\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, I will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By this exercise, I will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, I will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By this exercise, I will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2 Getting started",
    "text": "2 Getting started\n\n2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\n\nCode\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n2.2 Importing data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "3 Beyond ggplot2 Annotation: ggrepel",
    "text": "3 Beyond ggplot2 Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n   # Add a linear regression line\n  geom_smooth(method = lm, size = 0.5) +\n  \n  # Add labels for each point with their ID\n  geom_label(aes(label = ID), hjust = 0.5, vjust = -0.5) +\n  \n  # Set the coordinate limits for x and y axes\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\n\nWe simply replace  geom_text()  by  geom_text_repel()  and  geom_label()  by   geom_label_repel.\n\n3.1 Working with ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  # Add repelling labels for each point with their ID\n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\nWhat I learned\n\n\n\nWe can see that geom_label() places labels at specified coordinates without considering overlap, while geom_label_repel() automatically adjusts label positions to avoid overlap, resulting in a cleaner and more readable plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4 Beyond ggplot2 Themes",
    "text": "4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"blue\", \n                 fill=\"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\") +\ntheme_light()\n\n\n\n\n\n\n\n\n\n\n\nWhat I did\n\n\n\nIn this part, I try to change the colour to “blue” and the fill to “#3459e6” as well as the theme to “theme_light”.\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, I try to use Fivethirtyeight theme.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"blue\", \n                 fill=\"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_fivethirtyeight()\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"blue\", \n                 fill=\"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data,               aes(x = MATHS)) +   geom_histogram(bins=20,                   boundary = 100,                  color=\"blue\",                   fill=\"#3459e6\") +   ggtitle(\"Distribution of Maths scores\") +      theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5 Beyond Single Graph",
    "text": "5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\np1 &lt;- ggplot(data=exam_data,               \n           aes(x = MATHS)) +   \n      geom_histogram(bins=20,                   \n                     boundary = 100,                  \n                     color=\"blue\",                   \n                     fill=\"#3459e6\") +   \n      ggtitle(\"Distribution of Maths scores\") +        \n      coord_cartesian(xlim=c(0,100)) \n\n\n\n\n\nNext\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\np2 &lt;-  ggplot(data=exam_data,               \n              aes(x = ENGLISH)) +   \n  geom_histogram(bins=20,                   \n                 boundary = 100,                  \n                 color=\"blue\",                   \n                 fill=\"#3459e6\") +   \n  ggtitle(\"Distribution of English scores\") +          \n  coord_cartesian(xlim=c(0,100)) \n\n\n\n\n\nLastly, we will draw a scatterplot for English score versus Maths score by as shown below\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point(color = \"#3459e6\") +\n  geom_smooth(method=lm, \n              size=0.5,\n              color = \"blue\") +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\nWhat I did\n\n\n\nIn this part, I try to change the smooth’s color to “blue” and the point’s color to “#3459e6”.\n\n\n\n5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\np1 + p2\n\n\n\n\n\n\n\n5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n\nCode\n(p1 / p2) | p3\n\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n\nCode\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "6 Reference",
    "text": "6 Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly belief that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objective",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objective",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "2 Objective",
    "text": "2 Objective\nIn this exploratory data analysis (EDA) exercise, the primary objectives are to employ suitable methods and ggplot2 functions for the following:\n\nUncover the Distribution of Student Performance:\nExplore and visualize the distribution of Singaporean students’ performance in mathematics, reading, and science. Utilize ggplot2 functions to create informative and insightful visualizations that highlight patterns and variations in student scores across these subjects.\nExamine the Relationship Between Performance and School, Gender, and Socioeconomic Status:\nInvestigate and illustrate the connections between students’ academic performances in mathematics, reading, and science with respect to different factors such as schools, gender, and socioeconomic status (e.g. owning their own home, number of musical instruments). Leverage ggplot2 to create meaningful plots that facilitate a comprehensive understanding of these relationships."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "3 Data Preparation",
    "text": "3 Data Preparation\n\n3.1 Loading R packages\nIn this hands-on exercise, two R packages will be used. They are:\n\ntidyverse: An ecosystem of R packages, including dplyr, ggplot2, tidyr, and others, designed to work together seamlessly for data manipulation and visualization.\nhaven: A package for reading and writing data in various formats, including SAS, SPSS, and Stata.\ndplyr: A powerful package for data manipulation, providing functions like filter(), select(), mutate(), and summarise().\nplotly: A versatile package for creating interactive and dynamic plots, suitable for use in web applications.\nggrepel: An extension of ggplot2 that adds the ability to automatically adjust and repel text labels to avoid overlapping.\npatchwork: A package for combining multiple ggplot2 plots into a single plot.\nggthemes: Additional themes and color scales for use with ggplot2, allowing customization of the appearance of plots.\nhrbrthemes: A collection of themes and color palettes for use with ggplot2, created by Hadley Wickham.\n\nThe code chunk is as follows:\n\npacman::p_load(tidyverse,haven,dplyr,plotly,ggrepel, patchwork, \n               ggthemes, hrbrthemes)\n\n\n\n3.2 Importing PISA data\nThe code chunk below uses ‘read_sas()’ of haven to import PISA data into R environment.\n\nstu_qqq &lt;- haven::read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nFor this exercise, we only need to analyse the Singapore region, and the following code is used to filter the students in Singapore.\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\nNext, we save the filtered data as a new data file to promote running efficiency.\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;-\n  read_rds(\"data/stu_qqq_SG.rds\")\n\nThe dataset has 1279 variables and 6606 observations. In preparation for visual analysis, the following code collates the relevant variables and integrates them into the PV dataset:\n\n# Create a new dataset PV by extracting relevant variables from stu_qqq_SG\nPV &lt;- stu_qqq_SG %&gt;%\n  mutate(\n    Math_Score = rowMeans(select(., starts_with(\"PV1MATH\"), starts_with(\"PV2MATH\"), starts_with(\"PV3MATH\"), starts_with(\"PV4MATH\"), starts_with(\"PV5MATH\"), starts_with(\"PV6MATH\"), starts_with(\"PV7MATH\"), starts_with(\"PV8MATH\"), starts_with(\"PV9MATH\"), starts_with(\"PV10MATH\")), na.rm = TRUE),\n    Reading_Score = rowMeans(select(., starts_with(\"PV1READ\"), starts_with(\"PV2READ\"), starts_with(\"PV3READ\"), starts_with(\"PV4READ\"), starts_with(\"PV5READ\"), starts_with(\"PV6READ\"), starts_with(\"PV7READ\"), starts_with(\"PV8READ\"), starts_with(\"PV9READ\"), starts_with(\"PV10READ\")), na.rm = TRUE),\n    Science_Score = rowMeans(select(., starts_with(\"PV1SCIE\"), starts_with(\"PV2SCIE\"), starts_with(\"PV3SCIE\"), starts_with(\"PV4SCIE\"), starts_with(\"PV5SCIE\"), starts_with(\"PV6SCIE\"), starts_with(\"PV7SCIE\"), starts_with(\"PV8SCIE\"), starts_with(\"PV9SCIE\"), starts_with(\"PV10SCIE\")), na.rm = TRUE),\n    Total_Score = Math_Score + Reading_Score + Science_Score,\n    Gender = ifelse(ST004D01T == 1,  \"Female\", \"Male\"),\n    Own_Room = ifelse(ST250Q01JA == 1, \"Yes\" , \"No\"),\n    mi_num = ST251Q06JA\n  ) %&gt;%\n  select(CNTSCHID, CNTSTUID, Math_Score, Reading_Score, Science_Score, Total_Score, Gender, Own_Room, mi_num)\n\nIn the following code we check the dataset using “str”:\n\nstr(PV)\n\ntibble [6,606 × 9] (S3: tbl_df/tbl/data.frame)\n $ CNTSCHID     : num [1:6606] 70200052 70200134 70200112 70200004 70200152 ...\n  ..- attr(*, \"label\")= chr \"Intl. School ID\"\n $ CNTSTUID     : num [1:6606] 70200001 70200002 70200003 70200004 70200005 ...\n  ..- attr(*, \"label\")= chr \"Intl. Student ID\"\n $ Math_Score   : num [1:6606] 605 690 677 401 436 ...\n $ Reading_Score: num [1:6606] 667 628 583 361 476 ...\n $ Science_Score: num [1:6606] 640 672 660 344 479 ...\n $ Total_Score  : num [1:6606] 1912 1990 1920 1106 1391 ...\n $ Gender       : chr [1:6606] \"Female\" \"Male\" \"Male\" \"Male\" ...\n $ Own_Room     : chr [1:6606] \"No\" \"Yes\" \"Yes\" \"No\" ...\n $ mi_num       : num [1:6606] 3 4 2 2 1 2 2 3 4 1 ...\n  ..- attr(*, \"label\")= chr \"How many of these items are there at your [home]: Musical instruments (e.g. guitar, piano, [country-specific example])\"\n\n\nThe following code converts school ID and student ID from numeric values to characters:\n\nPV$CNTSCHID &lt;- as.character(PV$CNTSCHID)\nPV$CNTSCHID &lt;- as.character(PV$CNTSTUID)\n\nIn the last step, the following code is used to clear the missing values:\n\nPV &lt;- na.omit(PV)\n\n\n\n3.3 Variables Description\n\n\n\n\n\n\n\nVariables\nDescription\n\n\n\n\nCNTSCHID\nSchool ID, uniquely identifying each school\n\n\nCNTSTUID\nStudent ID, uniquely identifying each student\n\n\nMath_Score\nAverage math score computed from ten different tests for each student\n\n\nReading_Score\nAverage reading score computed from ten different tests for each student\n\n\nScience_Score\nAverage science score computed from ten different tests for each student\n\n\nTotal_Score\nOverall average score computed as the sum of math, reading, and science scores\n\n\nGender\nCategorical variable indicating the gender of the student (either “Male” or “Female”)\n\n\nOwn_Room\nBinary variable indicating whether the student has their own room (“Yes” or “No”)\n\n\nmi_num\nNumeric variable representing the number of musical instruments at the student’s home"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "4 Exploratory Data Analysis",
    "text": "4 Exploratory Data Analysis\n\n4.1 Distribution of Student Performance\nThe following code plots histograms of maths, reading, science, and total score scores to observe the distribution of student performance:\n\n\nCode\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Maths scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Reading scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Science scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score)) +\n  geom_histogram(bins = 10, boundary = 100, color = \"blue\", fill = \"#3459e6\") +\n  ggtitle(\"Distribution of Total scores\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot1 + plot2 + plot3 + plot4\n\n\n\n\n\n\n\n\n\n\n\nInsights from Visualisations\n\n\n\nThe histograms of Math, Reading, Science, and Total scores reveal a right-skewed distribution indicating that the median surpasses the mean.\n\n\n\n\n4.2 Student Performance by Gender\nThe following code generates density plots to compare the distribution of academic performance between students of different genders, providing a comprehensive understanding of the gender differences in academic achievement.\n\n\nCode\nplot1 &lt;- ggplot(data = PV, aes(x = Math_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"density\") +  \n   scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Math Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent) +\n  theme_minimal() +\n  theme(text = element_text(size = 8), plot.title = element_text(hjust = 0.5))\n\nplot2 &lt;- ggplot(data = PV, aes(x = Reading_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"Density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Reading Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot3 &lt;- ggplot(data = PV, aes(x = Science_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"Density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Science Scores by Gender\") +\n  theme(legend.position = \"none\") +\n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\nplot4 &lt;- ggplot(data = PV, aes(x = Total_Score, fill = Gender)) +\n  geom_density(alpha = 0.7, position = \"identity\", stat = \"density\") +\n  scale_fill_manual(values = c(\"Female\" = \"#FF5733\", \"Male\" = \"#3459e6\")) +\n  labs(title = \"Total Scores by Gender\") + \n  scale_y_continuous(labels = scales::percent)+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\ncombined_plots &lt;- plot1 + plot2 + plot3 + plot4 +\n  plot_layout(guides = \"collect\")\n\ncombined_plots\n\n\n\n\n\n\n\n\n\n\n\nInsights from Visualisations\n\n\n\n\nMathematics: The performance distribution in mathematics is similar for both males and females, but males have a slight edge in math scores.\nReading: Females have a slight advantage in reading scores compared to males, with males having a slightly lower distribution of scores.\nScience: The distribution of science scores is similar for males and females, but males tend to have slightly higher scores.\nTotal Score: The overall performance distribution in total scores is similar for males and females, with no significant gender differences.\n\n\n\n\n\n4.3 Student Performance by School\nThe following code calculates the maths, reading, and science, as well as the average grades in these three subjects for each school’s students, and synthesises a new dataset for graphing in the next step.\n\n\nCode\nSchool_Avg_Scores &lt;- PV %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Avg_Math_Score = mean(Math_Score, na.rm = TRUE),\n    Avg_Reading_Score = mean(Reading_Score, na.rm = TRUE),\n    Avg_Science_Score = mean(Science_Score, na.rm = TRUE),\n    Avg_Score = mean(Total_Score/3, na.rm = TRUE)\n  )\nSchool_Avg_Scores_subjects &lt;- School_Avg_Scores %&gt;%\n  select(CNTSCHID, starts_with(\"Avg_Math\"), starts_with(\"Avg_Reading\"), starts_with(\"Avg_Science\"),starts_with(\"Avg_Score\"))\nSchool_Avg_Scores_long &lt;- School_Avg_Scores_subjects %&gt;%\n  pivot_longer(cols = -CNTSCHID, names_to = \"Subject\", values_to = \"Score\")\n\n\nThe following code draws box plots showing the distribution of school average scores in each subject, with text labels identifying the four highest-scoring schools and the two lowest-scoring schools in each subject.\n\n\nCode\noutliers_data &lt;- School_Avg_Scores %&gt;%\n  pivot_longer(cols = starts_with(\"Avg_\"), names_to = \"Subject\", values_to = \"Score\") %&gt;%\n  group_by(Subject) %&gt;%\n  arrange(Score) %&gt;%\n  slice(c(1:2, (n() - 3):(n())))\n\nggplot(School_Avg_Scores_long, aes(x = Subject, y = Score, fill = Subject)) +\n  geom_boxplot(fill = \"#3459e6\") +\n  geom_text_repel(data = outliers_data, aes(label = CNTSCHID), \n                  position = position_dodge(width = 1), \n                  box.padding = 0.8, \n                  force = 1, \n                  segment.color = \"grey50\", \n                  size = 2) +  # Use ggrepel's geom_text_repel\n  labs(title = \"Boxplot of Average Scores for Each Subject\", x = \"\", y = \"\") +\n  theme_minimal() +\n  theme(text = element_text(size = 10),\n        plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\n\nInsights from Visualisations\n\n\n\n\nThe variation in subject and average scores across schools is very wide, with the top performing schools able to have an average score of about 800 per subject. However, schools at the bottom end of the scale have less than 300, and even less than 200 in reading.\nStudents from two schools, 70201256 and 70201120, had top average performance in two of the three subjects and top average scores per subject.\nStudents from two schools, 70205525 and 70202489, performed poorly.\nSome schools had students who were at the top in individual subjects but did not rank very high in the overall rankings, suggesting that these schools were better educated in certain individual subjects, e.g., 70205185 in reading.\n\n\n\n\n\n4.4 Student Performance by Musical Instruments\nThe following code shows scatter plots of students’ maths, reading, science and overall performance against the number of musical instruments owned, as well as showing the relationship by fitting a line through linear regression.\n\n\nCode\nplot_math &lt;- ggplot(data=PV, aes(x=mi_num, y=Math_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Math Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_reading &lt;- ggplot(data=PV, aes(x=mi_num, y=Reading_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Reading Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_science &lt;- ggplot(data=PV, aes(x=mi_num, y=Science_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Science Score by Musical instruments\", x = \"\", y = \"\")+\n    theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\nplot_total &lt;- ggplot(data=PV, aes(x=mi_num, y=Total_Score)) +\n  geom_point(color=\"#3459e6\") +\n  geom_smooth(method=lm, size=0.5,color = \"#FF5733\") +\n  labs(title =\"Total Score by Musical instruments\", x = \"\", y = \"\")+\n  theme_minimal() +\n  theme(text = element_text(size = 8),\n        plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot &lt;- plot_math + plot_reading + plot_science + plot_total\ncombined_plot\n\n\n\n\n\n\n\n\n\n\n\nInsights from Visualisations\n\n\n\nAs can be seen by the graph, the linear regression fit line is slightly upward, suggesting that students with more musical equipment in this dataset are likely to trend better in maths, reading, science, and overall performance in general.\n\n\n\n\n4.5 Student Performance by Own room\nThe following code plots box-and-line graphs to compare student performance in maths, reading, science and overall scores by whether or not they had the room to themselves.\n\n\nCode\np1 &lt;- ggplot(data = PV, aes(x =Math_Score , y = Own_Room)) +\n        geom_boxplot(fill = \"#3459e6\") +\n        labs(title =\"Math Score by Private Space\",x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\np2 &lt;- ggplot(data = PV, aes(x =Reading_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n     \n        labs(title =\"Reading Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n  \np3 &lt;- ggplot(data = PV, aes(x = Science_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n       \n        labs(title =\"Science Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))  \n\np4 &lt;- ggplot(data = PV, aes(x = Total_Score , y = Own_Room)) +\n        geom_boxplot( fill = \"#3459e6\") +\n       \n        labs(title =\"Total Score by Private Space\", x = \"\", y = \"\")+\n        theme_minimal() +\n        theme(text = element_text(size = 8),\n              plot.title = element_text(hjust = 0.5))\n\n\ncombined_plot&lt;- p1 + p2 + p3 + p4\ncombined_plot\n\n\n\n\n\n\n\n\n\n\n\nInsights from Visualisations\n\n\n\nFrom the box plot above, it is clear that students with their own rooms generally outperform students without their own rooms in maths, reading, science, and overall scores. This may be because a quiet, distraction-free environment helps students focus better on their studies, which in turn improves their academic performance."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "5 Conclusion",
    "text": "5 Conclusion\n\nThe distribution of students’ performance across subjects is right-skewed , indicating that the majority of students tend to have scores clustered towards the higher end of the scale, with a tail extending towards the lower scores.\nGender differences were observed, with males slightly excelling in mathematics, while females performed better in reading.\nSchool-level analysis showcased a wide performance variation, with some excelling in specific subjects.\nSocioeconomic factors like musical instruments and private spaces influenced scores positively. Students with more instruments tended to perform better, and those with private rooms consistently outperformed peers without."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#limitations",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#limitations",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "6 Limitations",
    "text": "6 Limitations\nHowever, it is essential to acknowledge certain limitations in our analysis. The exploration primarily relied on visualizations and graphical representations to uncover patterns and insights. While these visualizations offer a comprehensive overview of the data, they lack the precision and depth that statistical analysis methods could provide. For example, a linear regression fitting a line between the number of musical instruments owned and performance on maths, reading, science and overall grades would only provide a general trend in the relationship and would not establish causality. This trend is a preliminary observation, after which further exploration of the relationship between musical equipment and academic performance may require more in-depth statistical analyses that take into account additional variables and possible interactions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#learning-outcome",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#getting-started",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#importing-data",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "3 Importing Data",
    "text": "3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "4 Interactive Data Visualisation - ggiraph methods",
    "text": "4 Interactive Data Visualisation - ggiraph methods\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\",\n    color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal()\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n  \ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nWhat I did\n\n\n\nIn this part, I try to change the colour to “blue” and the fill to “#3459e6” as well as the theme to “theme_minimal()”.\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactivity",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "5 Interactivity",
    "text": "5 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\",\n    color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal()+\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n5.2 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color: lightgrey; border: 1px solid #ccc; border-radius: 5px; padding: 10px; font-family: 'Arial', sans-serif; font-size: 14px; font-weight: bold; color: black;\"\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",\n    color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal()+                \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\n\n\n\n\nWhat I did\n\n\n\nIn this part, I try to set a lightgrey background color (lightgrey), a subtle gray border (#ccc), rounded corners with border-radius, padding for space (padding: 10px), and uses the ‘Roboto’ font as the primary font with a fallback to sans-serif. The font size is set to 14px, the text is bold (font-weight: bold), and the color is black (black).\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n5.3 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal()+\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n5.4 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely .data_id\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS, tooltip = ID),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)           \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n5.5 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: darkblue;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nWhat I did\n\n\n\nIn this part, I try to change opts_hover css color to darkblue.\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n5.6 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() +                    \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: darkblue;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                                            \n\n\n\n\n\n\n\n5.7 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of .onclick\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n5.8 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\",color = \"blue\",\n    fill=\"#3459e6\") +\n  theme_minimal() + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: darkblue;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "6 3.7 Interactive Data Visualisation - plotly methods!",
    "text": "6 3.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n6.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n6.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe PlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n6.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1, color = \"blue\",\n    fill=\"#3459e6\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\n\n\n\n6.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe PlotCode\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1,color = \"blue\",\n    fill=\"#3459e6\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1,color = \"blue\",\n    fill=\"#3459e6\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "7 Interactive Data Visualisation - crosstalk methods!",
    "text": "7 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n7.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n7.2 Linked brushing: crosstalk method\n\nThe PlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1,color = \"blue\",     fill=\"#3459e6\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03A.html#reference",
    "title": "Hands-on Exercise 3A: Programming Interactive Data Visualisation with R",
    "section": "8 Reference",
    "text": "8 Reference\n\n8.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n8.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n2  Beyond ggplot2 Fundamentals\n4  Programming Animated Statistical Graphics with R"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#overview",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#getting-started",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "3 Animated Data Visualisation: gganimate methods",
    "text": "3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')+\n  theme_minimal()\n\n\n\n\n\n\n3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')+\n  theme_minimal()+\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "4 Animated Data Visualisation: plotly",
    "text": "4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotCode\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +theme_minimal()+\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotCode\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +theme_minimal()+\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotCode\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03B.html#reference",
    "title": "Hands-on Exercise 3B: Programming Animated Statistical Graphics with R",
    "section": "5 Reference",
    "text": "5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "",
    "text": "The purpose of this Take home exercise is to critique and improve on in Take-home Exercise 1. This will be done based on clarity and aesthetics. The original design will then be recreated using data visualisation design principles and best practices using their extensions and packages."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overview",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overview",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "",
    "text": "The purpose of this Take home exercise is to critique and improve on in Take-home Exercise 1. This will be done based on clarity and aesthetics. The original design will then be recreated using data visualisation design principles and best practices using their extensions and packages."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-preparation",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "2 Data Preparation",
    "text": "2 Data Preparation\nIn this part, we will follow the data preparation steps of our classmate’s TAKE HOME EXERCISE 1 for further data visualisation critique.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes, \n               tidyverse, ggpattern, ggridges)\n\n\n\nCode\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")\nselect_df &lt;- stu_qqq_SG[c(3:4,7,26,1039,1167:1196)]\nmath_long &lt;- select_df %&gt;%\n  pivot_longer(\n    cols = contains(\"MATH\"),\n    names_to = \"MATH\",\n    values_to = \"MATH_score\"\n  )\nmath_long &lt;- math_long %&gt;% \n  arrange(CNTSCHID, CNTSTUID, STRATUM, ST004D01T, ESCS)\nmath_long_selected &lt;- select(math_long, -contains(\"READ\"), -contains(\"SCIE\"))\n\nread_long &lt;- select_df %&gt;%\n  pivot_longer(\n    cols = contains(\"READ\"),\n    names_to = \"READ\",\n    values_to = \"READ_score\"\n  )\nread_long &lt;- read_long %&gt;% \n  arrange(CNTSCHID, CNTSTUID, STRATUM, ST004D01T, ESCS)\nread_long_selected &lt;- select(read_long, -contains(\"MATH\"), -contains(\"SCIE\"), -one_of(names(math_long_selected)))\n\nscie_long &lt;- select_df %&gt;%\n  pivot_longer(\n    cols = contains(\"SCIE\"),\n    names_to = \"SCIENCE\",\n    values_to = \"SCIENCE_score\"\n  )\nscie_long &lt;- scie_long %&gt;% \n  arrange(CNTSCHID, CNTSTUID, STRATUM, ST004D01T, ESCS)\nscie_long_selected &lt;- select(scie_long, -contains(\"MATH\"), -contains(\"READ\"), -one_of(names(math_long_selected)))\n\ncombined_long_df &lt;- bind_cols(math_long_selected, read_long_selected, scie_long_selected)\n\n\n\n\nCode\n#translate column names\nschool_map &lt;- c(\"SGP01\" = \"Public/Secondary\",\n                \"SGP02\" = \"Public/Post-secondary\",\n                \"SGP03\" = \"Private/Secondary\",\n                \"SGP97\" = \"Undisclosed\")\ngender_map &lt;- c(\"1\" = \"Female\",\n                \"2\" = \"Male\")\nclean_df &lt;- combined_long_df %&gt;%\n  mutate(SCHOOL = school_map[STRATUM],\n         GENDER = gender_map[ST004D01T],\n         Math = as.numeric(MATH_score),\n         Read = as.numeric(READ_score),\n         Science = as.numeric(SCIENCE_score),\n         ESC_status = round(((ESCS - min(ESCS, na.rm = TRUE))/\n                              (max(ESCS, na.rm = TRUE)-min(ESCS, na.rm = TRUE)))*100, digits = 0),\n         ESC_status = case_when(\n           ESC_status &gt;= 0 & ESC_status &lt; 25 ~ \"Low\",\n           ESC_status &gt;= 25 & ESC_status &lt; 50 ~ \"Lower-Middle\",\n           ESC_status &gt;= 50 & ESC_status &lt; 75 ~ \"Upper-Middle\",\n           ESC_status &gt;= 75 & ESC_status &lt;= 100 ~ \"High\",\n           TRUE ~ as.character(ESC_status)\n         ))\n\n#remove columns which are not used to plot\nclean_short_df &lt;- clean_df %&gt;%\n  select(-c(CNTSCHID, STRATUM, ST004D01T, ESCS, MATH_score, READ_score, SCIENCE_score))\n\n\n\n\nCode\n#Calculate median,Q1,Q3,outliers for Math\nmedian_math &lt;- median(clean_short_df$Math)\nquantiles_math &lt;- quantile(clean_short_df$Math, probs = c(0.25, 0.75))\niqr_math &lt;- quantiles_math[2] - quantiles_math[1]\nupper_bound_math &lt;- quantiles_math[2] + 1.5 * iqr_math\nlower_bound_math &lt;- quantiles_math[1] - 1.5 * iqr_math\noutliers_math &lt;- subset(clean_short_df, Math &gt; upper_bound_math | Math &lt; lower_bound_math)\n#Calculate median,Q1,Q3,outliers for Read\nmedian_read &lt;- median(clean_short_df$Read)\nquantiles_read &lt;- quantile(clean_short_df$Read, probs = c(0.25, 0.75))\niqr_read &lt;- quantiles_read[2] - quantiles_read[1]\nupper_bound_read &lt;- quantiles_read[2] + 1.5 * iqr_read\nlower_bound_read &lt;- quantiles_read[1] - 1.5 * iqr_read\noutliers_read &lt;- subset(clean_short_df, Read &gt; upper_bound_read | Read &lt; lower_bound_read)\n#Calculate median,Q1,Q3,outliers for Science\nmedian_science &lt;- median(clean_short_df$Science)\nquantiles_science &lt;- quantile(clean_short_df$Science, probs = c(0.25, 0.75))\niqr_science &lt;- quantiles_science[2] - quantiles_science[1]\nupper_bound_science &lt;- quantiles_science[2] + 1.5 * iqr_science\nlower_bound_science &lt;- quantiles_science[1] - 1.5 * iqr_science\noutliers_science &lt;- subset(clean_short_df, Science &gt; upper_bound_science | Science &lt; lower_bound_science)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-visualization-critique",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-visualization-critique",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3 Data Visualization Critique",
    "text": "3 Data Visualization Critique\n\n3.1 Distribution of Performance on each subject\n\nOriginal DesignSketch of Proposed DesignFinal Design\n\n\n\n\nCode\np1 &lt;- ggplot(data = clean_short_df,\n             aes(x= Math))+\n  geom_histogram(bins=15,\n                 color = \"grey40\",\n                 fill=\"grey95\",\n                 size = 0.5)+\n  geom_vline(aes(xintercept=median_math), \n             color=c(\"#660000\"), \n             size=0.5, \n             linetype=\"dashed\") +\n  geom_text(x = median_math, \n            y = 400, \n            label = paste(\"Median=581\"), \n            color = c(\"#660000\"),\n            size = 2) +\n  geom_vline(xintercept = quantiles_math, \n             color = c(\"#FF6666\"), \n             size = 0.5, \n             linetype = \"dashed\") +\n  geom_text(x = quantiles_math[1], \n            y = -300, \n            label = paste(\"Q1=504\"), \n            hjust = 1, \n            color = c(\"#FF6666\"),\n            size = 2) +\n  geom_text(x = quantiles_math[2], \n            y = -300, \n            label = paste(\"Q3=648\"), \n            hjust = 0, \n            color = c(\"#FF6666\"),\n            size = 2) +\n  geom_point(data = outliers_math, \n             aes(x = Math, y = 0), \n             color = c(\"#FFCC99\"), \n             size = 0.8)+\n  ylab(\"\")+\n  theme_minimal(base_size=8)\n\np2 &lt;- ggplot(data = clean_short_df,\n             aes(x= Read))+\n  geom_histogram(bins=15,\n                 color = \"grey40\",\n                 fill=\"grey95\",\n                 size = 0.5)+\n  geom_vline(aes(xintercept=median_read), \n             color=c(\"#660000\"), \n             size=0.5, \n             linetype=\"dashed\") +\n  geom_text(x = median_read, \n            y = 450, \n            label = paste(\"Median=551\"), \n            color = c(\"#660000\"),\n            size = 1.8) +\n  geom_vline(xintercept = quantiles_read, \n             color = c(\"#FF6666\"), \n             size = 0.5, \n             linetype = \"dashed\") +\n  geom_text(x = quantiles_read[1], \n            y = -350, \n            label = paste(\"Q1=473\"), \n            hjust = 1, \n            color = c(\"#FF6666\"),\n            size = 1.8) +\n  geom_text(x = quantiles_read[2], \n            y = -350, \n            label = paste(\"Q3=618\"), \n            hjust = 0, \n            color = c(\"#FF6666\"),\n            size = 1.8) +\n  geom_point(data = outliers_read, \n             aes(x = Read, y = 0), \n             color = c(\"#FFCC99\"), \n             size = 0.8)+\n  labs(y=\"\",title=\"Distribution of Performance\")+\n  theme_minimal(base_size=8)\n\np3 &lt;- ggplot(data = clean_short_df,\n             aes(x= Science))+\n  geom_histogram(bins=15,\n                 color = \"grey40\",\n                 fill=\"grey95\",\n                 size = 0.5)+\n  geom_vline(aes(xintercept=median_science), \n             color=c(\"#660000\"), \n             size=0.5, \n             linetype=\"dashed\") +\n  geom_text(x = median_science, \n            y = 450, \n            label = paste(\"Median=568\"), \n            color = c(\"#660000\"),\n            size = 1.8) +\n  geom_vline(xintercept = quantiles_science, \n             color = c(\"#FF6666\"), \n             size = 0.5, \n             linetype = \"dashed\") +\n  geom_text(x = quantiles_science[1], \n            y = -350, \n            label = paste(\"Q1=495\"), \n            hjust = 1, \n            color = c(\"#FF6666\"),\n            size = 1.8) +\n  geom_text(x = quantiles_science[2], \n            y = -350, \n            label = paste(\"Q3=631\"), \n            hjust = 0, \n            color = c(\"#FF6666\"),\n            size = 1.8) +\n  geom_point(data = outliers_science, \n             aes(x = Science, y = 0), \n             color = c(\"#FFCC99\"), \n             size = 0.8)+\n  ylab(\"\")+\n  theme_minimal(base_size=8)\n\n(p2/p3)|p1\n\n\n\n\n\nCritique of Clarity\n\nThe numerical values in the current text labels are too small, making them less legible.\nY-axis information is not displayed, compromising the completeness of the graphs.\nThe arrangement using p2/p3 | p1 lacks clarity, making it difficult to distinguish the primary and secondary information.\nThe mean lines are not displayed, hindering an understanding of the data distribution.\nThe display of numerical values for outliers and quartiles is unclear, requiring a more intuitive representation.\n\nCritique of Aesthetics\n\nThe title lacks alignment, affecting the overall design’s coherence.\nThe color selection is relatively monotonous, lacking vibrancy and visual appeal.\n\n\n\n\n\n\n\n\n\n\n\n\nCode\np1 &lt;- ggplot(data = clean_short_df, aes(x = Math)) +\n  geom_histogram(bins = 15, color = \"grey40\", fill = \"skyblue\", size = 0.5) +\n  geom_vline(aes(xintercept = median_math), color = \"#FF5733\", size = 0.5, linetype = \"dashed\") +\n  geom_text(x = median_math, y = 4000, label = paste(\"Median =\", round(median_math)), hjust = 0, color = \"#FF5733\", size = 3) +\n  geom_vline(xintercept = quantiles_math, color = \"#FF5733\", size = 0.5, linetype = \"dashed\") +\n  geom_text(x = quantiles_math[1], y = 3000, label = paste(\"Q1 =\", round(quantiles_math[1])), hjust = 1, color = \"#FF5733\", size = 3) +\n  geom_text(x = quantiles_math[2], y = 3000, label = paste(\"Q3 =\", round(quantiles_math[2])), hjust = 0, color = \"#FF5733\", size = 3) +\n  geom_vline(aes(xintercept = mean(clean_short_df$Math)), color = \"#FF5733\", size = 0.5, linetype = \"dashed\") +\n  geom_text(x = mean(clean_short_df$Math), y = 5000, label = paste(\"Mean =\", round(mean(clean_short_df$Math))), hjust = 1, color = \"#FF5733\", size = 3) +\n  labs(y = \"Frequency\", x = \"Math Score\",title = \"Distribution of Math Performance\") +\n  geom_boxplot(width = 800, fill = \"#66c2a5\", alpha = 0.5, position = position_nudge(y = -1000)) +\n  theme_minimal()+theme(plot.title = element_text(hjust = 0.5))\n\np2 &lt;- ggplot(data = clean_short_df, aes(x = Read)) +\n  geom_histogram(bins = 15, color = \"grey40\", fill = \"skyblue\", size = 0.5) +\n  geom_vline(aes(xintercept = median_read), color = \"#FF5733\", size = 0.5, linetype = \"dashed\") +\n  geom_text(x = median_read, y = 4000, label = paste(\"Median =\", round(median_read)), hjust = 0, color = \"#FF5733\", size = 3) +\n  geom_vline(xintercept = quantiles_read, color = \"#FF5733\", size = 0.5, linetype = \"dashed\") +\n  geom_text(x = quantiles_read[1], y = 3000, label = paste(\"Q1 =\", round(quantiles_read[1])), hjust = 1, color = \"#FF5733\", size = 3) +\n  geom_text(x = quantiles_read[2], y = 3000, label = paste(\"Q3 =\", round(quantiles_read[2])), hjust = 0, color = \"#FF5733\", size = 3) +\n  geom_vline(aes(xintercept = mean(clean_short_df$Read)), color = \"#FF5733\", size = 0.5, linetype = \"dashed\") +\n  geom_text(x = mean(clean_short_df$Read), y = 5000, label = paste(\"Mean =\", round(mean(clean_short_df$Read))), hjust = 1, color = \"#FF5733\", size = 3) +\n  labs(y = \"Frequency\", x = \"Read Score\",title = \"Distribution of Read Performance\") +\n  geom_boxplot(width = 800, fill = \"#66c2a5\", alpha = 0.5, position = position_nudge(y = -1000)) +\n  theme_minimal()+theme(plot.title = element_text(hjust = 0.5))\n\np3 &lt;- ggplot(data = clean_short_df, aes(x = Science)) +\n  geom_histogram(bins = 15, color = \"grey40\", fill = \"skyblue\", size = 0.5) +\n  geom_vline(aes(xintercept = median_science), color = \"#FF5733\", size = 0.5, linetype = \"dashed\") +\n  geom_text(x = median_science, y = 4000, label = paste(\"Median =\", round(median_science)), hjust = 0, color = \"#FF5733\", size = 3) +\n  geom_vline(xintercept = quantiles_science, color = \"#FF5733\", size = 0.5, linetype = \"dashed\") +\n  geom_text(x = quantiles_science[1], y = 3000, label = paste(\"Q1 =\", round(quantiles_science[1])), hjust = 1, color = \"#FF5733\", size = 3) +\n  geom_text(x = quantiles_science[2], y = 3000, label = paste(\"Q3 =\", round(quantiles_science[2])), hjust = 0, color = \"#FF5733\", size = 3) +\n  geom_vline(aes(xintercept = mean(clean_short_df$Science)), color = \"#FF5733\", size = 0.5, linetype = \"dashed\") +\n  geom_text(x = mean(clean_short_df$Science), y = 5000, label = paste(\"Mean =\", round(mean(clean_short_df$Science))), hjust = 1, color = \"#FF5733\", size = 3) +\n  labs(y = \"Frequency\", x = \"Science Score\",title = \"Distribution of Science Performance\") +\n  geom_boxplot(width = 800, fill = \"#66c2a5\", alpha = 0.5, position = position_nudge(y = -1000)) +\n  theme_minimal() +theme(plot.title = element_text(hjust = 0.5))\n\n\n\np1/p2/p3\n\n\n\n\n\nClarity Improvements\n\nIncreased the size of numerical values in labels (e.g., median, quartiles, mean) for better legibility. The size = 3 parameter in the geom_text functions was adjusted.\nDisplayed Y-axis labels (\"Frequency\") in each plot and changed X-axis labels name (Subject Score) to provide context and enhance the completeness of the graphs.\nAdjust the arrangement of graphs horizontally to provide a clearer view of each subject’s distribution using p1/p2/p3.\nAdded mean lines to the plots (geom_vline) to enhance the understanding of the data distribution. The mean is now visually represented with dashed lines.\nEnhance clarity by incorporating a boxplot below each histogram, providing a more intuitive representation of outliers, quartiles, and the median.\n\nAesthetics Improvements\n\nAdjust the alignment of the title to ensure consistency and professionalism throughout the design, enhancing overall aesthetics.\nIntroduced a more vibrant color scheme with varied shades of blue, green and red (“skyblue”, “#66c2a5”, “#FF5733”) to enhance visual appeal and reduce monotony.\n\n\n\n\n\n\n3.2 Relationship b/w school types and performance\n\nOriginal DesignSketch of Proposed DesignFinal Design\n\n\n\n\nCode\np7 &lt;- ggplot(data = clean_short_df, \n             aes(y = Math, \n                 x= SCHOOL)) +\n  geom_boxplot(notch=TRUE)+\n  theme_minimal(base_size=7)+\n  labs(x=\"\",title=\"Relationship: School Type and Performance\")\np8 &lt;- ggplot(data = clean_short_df, \n             aes(y = Science, \n                 x= SCHOOL)) +\n  geom_boxplot(notch=TRUE)+\n  theme_minimal(base_size=7)+\n  labs(x=\"School Type\")\np9 &lt;- ggplot(data = clean_short_df, \n             aes(y = Read, \n                 x= SCHOOL)) +\n  geom_boxplot(notch=TRUE)+\n  theme_minimal(base_size=7)+\n  labs(x=\"\")\np7+p8+p9\n\n\n\n\n\nCritique of Clarity\n\nThe plots lack Y-axis labels, hindering the interpretation of the numerical values represented..\nConsidering the similarity in Y-axis values across the three plots, combining them into a single plot with a shared Y-axis might simplify the visual presentation and facilitate comparison.\nWhen the medians are closely grouped, discerning differences becomes challenging.\n\nCritique of Aesthetics\n\nThe titles are not centered, which affects the overall visual appeal.\nIntroducing distinct colors for different school types would enhance clarity and alleviate potential confusion.\nThe lengthy names of school types might compromise the visual aesthetics.\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nclean_short_df &lt;- clean_short_df %&gt;%\n  mutate(SCHOOL = recode(SCHOOL, \"Private/Secondary\" = \"Private\", \"Public/Secondary\" = \"Public\"))\n\n\nschool_colors &lt;- c(\"Private\" = \"coral\", \"Public\" = \"skyblue\")\n\np7 &lt;- ggplot(data = clean_short_df, aes(y = Math, x = SCHOOL, fill = SCHOOL)) +\n  geom_boxplot() +\n  stat_summary(fun = mean, geom = \"point\", shape = 18, size = 2, color = \"red\", position = position_dodge(width = 0.75)) +\n  stat_summary(fun = function(x) mean(x), geom = \"text\", aes(label = paste(\"Avg=\", round(..y.., 2))),\n               position = position_dodge(width = 0.75), vjust = -1, size=2,show.legend = FALSE) +\n  labs(y = \"Score\", x=\"Math\")+\n  scale_fill_manual(values = school_colors) +\n  theme_minimal(base_size = 9)  +\n  ylim(150, 900) + guides(fill = FALSE)\n\np8 &lt;- ggplot(data = clean_short_df, aes(y = Science, x = SCHOOL, fill = SCHOOL)) +\n  geom_boxplot() +\n  scale_fill_manual(values = school_colors) +\n    stat_summary(fun = mean, geom = \"point\", shape = 18, size = 2, color = \"red\", position = position_dodge(width = 0.75)) +\n  stat_summary(fun = function(x) mean(x), geom = \"text\", aes(label = paste(\"Avg=\", round(..y.., 2))),\n               position = position_dodge(width = 0.75), vjust = -1, size=2,show.legend = FALSE) +\n  theme_minimal(base_size = 9) +\n  labs(y = \"\", x = \"Science\", title = \"Relationship: School Type and Performance\") +\n  ylim(150, 900) + \n  theme(axis.text.y = element_blank(), axis.title.y = element_blank()) + guides(fill = FALSE) +theme(plot.title = element_text(hjust = 0.5))\n\np9 &lt;- ggplot(data = clean_short_df, aes(y = Read, x = SCHOOL, fill = SCHOOL)) +\n  geom_boxplot() +\n  scale_fill_manual(values = school_colors) +\n  stat_summary(fun = mean, geom = \"point\", shape = 18, size = 2, color = \"red\", position = position_dodge(width = 0.75)) +\n  stat_summary(fun = function(x) mean(x), geom = \"text\", aes(label = paste(\"Avg=\", round(..y.., 2))),\n               position = position_dodge(width = 0.75), vjust = -1,size=2, show.legend = FALSE) +\n  theme_minimal(base_size = 9) +\n  labs(y = \"\", x = \"Read\") +\n  ylim(150, 900) +\n  theme(axis.text.y = element_blank(), axis.title.y = element_blank())\n\np7 + p8 + p9\n\n\n\n\n\nClarity Improvements\n\nAdded Y-axis labels to each plot, specifically for the “Score” variable. This improvement aids in understanding the scale and context of the plotted values.\nBoxplots with means represented by red points and labeled with “Avg=” followed by the rounded average values. This provides additional information and makes the plots more informative.\nMaintained individual plots for each subject (Math, Science, and Read) but combined them into a single plot with a shared Y-axis. This consolidation simplifies the visual representation and facilitates easier comparison of similar Y-axis values.\n\nAesthetics Improvements\n\nIntroduced distinct colors for each school type (“Private” and “Public”) using “coral” and “skyblue,” respectively. This enhances clarity and helps differentiate between the two types visually.\nCentered the title “Relationship: School Type and Performance” above the combined plot. This enhances the aesthetic appeal and provides a more balanced presentation.\nModified school type names to be more concise and clear by recoding “Private/Secondary” to “Private” and “Public/Secondary” to “Public.”\n\n\n\n\n\n\n3.3 Relationship b/w socioeconomic status and performance\n\nOriginal DesignSketch of Proposed DesignFinal Design\n\n\n\n\nCode\np10&lt;-ggplot(data = na.omit(clean_short_df), \n       aes(y = Math, \n           x= ESC_status)) +\n  geom_boxplot(notch=TRUE)+\n  theme_minimal(base_size=6)+\n  labs(x=\"ESC status\", title=\"Relationship: ESC status and Performance\")\np11&lt;-ggplot(data = na.omit(clean_short_df), \n            aes(y = Read, \n                x= ESC_status)) +\n  geom_boxplot(notch=TRUE)+\n  theme_minimal(base_size=6)+\n  labs(x=\"\")\n\np12&lt;-ggplot(data = na.omit(clean_short_df), \n       aes(y = Science, \n           x= ESC_status)) +\n  geom_boxplot(notch=TRUE)+\n  theme_minimal(base_size=6)+\n  labs(x=\"\")\np10+p11+p12\n\n\n\n\n\nCritique of Clarity\n\nThe plots lack Y-axis labels, hindering the interpretation of the numerical values represented..\nThe x-axis categories “ESC status” lack proper sorting, particularly for “status,” where an ordered representation (e.g., “Low,” “Lower-Middle,” “Upper-Middle,” “High”) could enhance clarity and facilitate easier comparison.\nThe absence of a regression line (lm line) makes it challenging to visually assess the relationship between ESC status and student performance.\n\nCritique of Aesthetics\n\nThe titles are not centered, which affects the overall visual appeal.\nThere is a need for improved color differentiation for different ESC statuses.\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nclean_short_df$ESC_status_numeric &lt;- as.numeric(clean_short_df$ESC_status)\n\nesc_factor_order &lt;- c(\"Low\", \"Lower-Middle\", \"Upper-Middle\", \"High\")\n\n\nESC_status_color &lt;- c(\"High\" = \"#FF6666\", \"Upper-Middle\" = \"coral\", \"Lower-Middle\" = \"#66c2a5\", \"Low\" = \"skyblue\")\n\nclean_short_df$ESC_status &lt;- factor(clean_short_df$ESC_status, levels = esc_factor_order, ordered = TRUE)\n\nclean_short_df$ESC_status_numeric &lt;- as.numeric(clean_short_df$ESC_status)\n\nclean_short_df$ESC_status &lt;- factor(clean_short_df$ESC_status, levels = esc_factor_order, ordered = TRUE)\n\np10 &lt;- ggplot(data = na.omit(clean_short_df), \n              aes(y = Math, \n                  x = ESC_status, color = ESC_status)) +\n  geom_jitter(width = 0.2) +geom_violin(scale = \"width\", trim = TRUE)+\n  geom_smooth(aes(x = ESC_status_numeric, y = Math), method = \"lm\", se = FALSE, color = \"#FF5733\") +\n  theme_minimal(base_size = 6) +\n  labs(y = \"Math Score\", x = \"\", title = \"Relationship: ESC status and Performance\") +\n  scale_color_manual(values = ESC_status_color) +\n  theme_minimal(base_size = 9) +\n  ylim(150, 900) +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  guides(color = FALSE)\n\n\np11 &lt;- ggplot(data = na.omit(clean_short_df), \n              aes(y = Read, \n                  x = ESC_status, color = ESC_status)) +\n  geom_jitter(width = 0.2) + geom_violin(scale = \"width\", trim = TRUE) +\n  geom_smooth(aes(x = ESC_status_numeric, y = Math),method=lm, color = \"#FF5733\",se = FALSE)+\n  theme_minimal(base_size = 6) +\n  labs(y = \"Science Score\", x = \"\") +\n  scale_color_manual(values = ESC_status_color) +\n  theme_minimal(base_size = 9) +\n  ylim(150, 900) +\n  guides(color = FALSE) +\n  theme(plot.title = element_text(hjust = 0.5))\n\np12 &lt;- ggplot(data = na.omit(clean_short_df), \n              aes(y = Science, \n                  x = ESC_status, color = ESC_status)) +\n  geom_jitter(width = 0.2) + geom_violin(scale = \"width\", trim = TRUE) +\n  geom_smooth(aes(x = ESC_status_numeric, y = Math),method=lm, color = \"#FF5733\",se = FALSE) +\n  theme_minimal(base_size = 6) +\n  labs(y = \"Read Score\", x = \"\") +\n  scale_color_manual(values = ESC_status_color) +\n  theme_minimal(base_size = 9) +\n  ylim(150, 900) +\n  guides(color = FALSE)\n\np10 / p11 / p12\n\n\n\n\n\nClarity Improvements\n\nAdded Y-axis labels to each plot (“Math Score,” “Science Score,” “Read Score”) for better interpretation and understanding of the plotted values.\nEnsured proper sorting of x-axis categories, especially for “status.” The “ESC_status” is now converted to an ordered factor with the specified order (“Low,” “Lower-Middle,” “Upper-Middle,” “High”).\nAdded a regression line (lm line) to each plot for a more intuitive comparison and to visually assess the relationship between ESC status and student performance.\nUsed geom_violin instead of Boxplot to enhance clarity by providing a visual representation of the distribution of scores for each ESC status. Violin plots convey information about the data distribution, making it easier to understand the spread and density of scores.\nApplied geom_jitter to add jitter to the points, preventing overlap and improving the visibility of individual data points. This ensures that each data point especially the outlier is distinct and contributes to a clearer representation of the dataset.\n\nAesthetics Improvements\n\nCenter-aligned the plot titles (“Relationship: ESC status and Performance”) for enhanced visual appeal and overall design coherence.\nUsed scale_color_manual for the customization of colors for each ESC status. This not only contributes to improved clarity by differentiating between categories but also enhances the overall aesthetics of the plots. Distinct colors make the visual representation more appealing."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#relationship-bw-socioeconomic-status-and-performance",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#relationship-bw-socioeconomic-status-and-performance",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "4 Relationship b/w socioeconomic status and performance",
    "text": "4 Relationship b/w socioeconomic status and performance\n\nOriginal DesignSketch of Proposed DesignFinal Design\n\n\n\n\nCode\np10&lt;-ggplot(data = na.omit(clean_short_df), \n       aes(y = Math, \n           x= ESC_status)) +\n  geom_boxplot(notch=TRUE)+\n  theme_minimal(base_size=6)+\n  labs(x=\"ESC status\", title=\"Relationship: ESC status and Performance\")\np11&lt;-ggplot(data = na.omit(clean_short_df), \n            aes(y = Read, \n                x= ESC_status)) +\n  geom_boxplot(notch=TRUE)+\n  theme_minimal(base_size=6)+\n  labs(x=\"\")\n\np12&lt;-ggplot(data = na.omit(clean_short_df), \n       aes(y = Science, \n           x= ESC_status)) +\n  geom_boxplot(notch=TRUE)+\n  theme_minimal(base_size=6)+\n  labs(x=\"\")\np10+p11+p12\n\n\n\n\n\nCritique of Clarity\n\nThe plots lack Y-axis labels, hindering the interpretation of the numerical values represented..\nThe x-axis categories “ESC status” lack proper sorting, particularly for “status,” where an ordered representation (e.g., “Low,” “Lower-Middle,” “Upper-Middle,” “High”) could enhance clarity and facilitate easier comparison.\nThe absence of a regression line (lm line) makes it challenging to visually assess the relationship between ESC status and student performance.\n\nCritique of Aesthetics\n\nThe titles are not centered, which affects the overall visual appeal.\nThere is a need for improved color differentiation for different ESC statuses.\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nclean_short_df$ESC_status_numeric &lt;- as.numeric(clean_short_df$ESC_status)\n\nesc_factor_order &lt;- c(\"Low\", \"Lower-Middle\", \"Upper-Middle\", \"High\")\n\n\nESC_status_color &lt;- c(\"High\" = \"#FF6666\", \"Upper-Middle\" = \"coral\", \"Lower-Middle\" = \"#66c2a5\", \"Low\" = \"skyblue\")\n\nclean_short_df$ESC_status &lt;- factor(clean_short_df$ESC_status, levels = esc_factor_order, ordered = TRUE)\n\nclean_short_df$ESC_status_numeric &lt;- as.numeric(clean_short_df$ESC_status)\n\nclean_short_df$ESC_status &lt;- factor(clean_short_df$ESC_status, levels = esc_factor_order, ordered = TRUE)\n\np10 &lt;- ggplot(data = na.omit(clean_short_df), \n              aes(y = Math, \n                  x = ESC_status, color = ESC_status)) +\n  geom_jitter(width = 0.2) +geom_violin(scale = \"width\", trim = TRUE)+\n  geom_smooth(aes(x = ESC_status_numeric, y = Math), method = \"lm\", se = FALSE, color = \"#FF5733\") +\n  theme_minimal(base_size = 6) +\n  labs(y = \"Math Score\", x = \"\", title = \"Relationship: ESC status and Performance\") +\n  scale_color_manual(values = ESC_status_color) +\n  theme_minimal(base_size = 9) +\n  ylim(150, 900) +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  guides(color = FALSE)\n\n\np11 &lt;- ggplot(data = na.omit(clean_short_df), \n              aes(y = Read, \n                  x = ESC_status, color = ESC_status)) +\n  geom_jitter(width = 0.2) + geom_violin(scale = \"width\", trim = TRUE) +\n  geom_smooth(aes(x = ESC_status_numeric, y = Math),method=lm, color = \"#FF5733\",se = FALSE)+\n  theme_minimal(base_size = 6) +\n  labs(y = \"Science Score\", x = \"\") +\n  scale_color_manual(values = ESC_status_color) +\n  theme_minimal(base_size = 9) +\n  ylim(150, 900) +\n  guides(color = FALSE) +\n  theme(plot.title = element_text(hjust = 0.5))\n\np12 &lt;- ggplot(data = na.omit(clean_short_df), \n              aes(y = Science, \n                  x = ESC_status, color = ESC_status)) +\n  geom_jitter(width = 0.2) + geom_violin(scale = \"width\", trim = TRUE) +\n  geom_smooth(aes(x = ESC_status_numeric, y = Math),method=lm, color = \"#FF5733\",se = FALSE) +\n  theme_minimal(base_size = 6) +\n  labs(y = \"Read Score\", x = \"\") +\n  scale_color_manual(values = ESC_status_color) +\n  theme_minimal(base_size = 9) +\n  ylim(150, 900) +\n  guides(color = FALSE)\n\np10 / p11 / p12\n\n\n\n\n\nClarity Improvements\n\nAdded Y-axis labels to each plot (“Math Score,” “Science Score,” “Read Score”) for better interpretation and understanding of the plotted values.\nEnsured proper sorting of x-axis categories, especially for “status.” The “ESC_status” is now converted to an ordered factor with the specified order (“Low,” “Lower-Middle,” “Upper-Middle,” “High”).\nAdded a regression line (lm line) to each plot for a more intuitive comparison and to visually assess the relationship between ESC status and student performance.\nUsed geom_violin instead of Boxplot to enhance clarity by providing a visual representation of the distribution of scores for each ESC status. Violin plots convey information about the data distribution, making it easier to understand the spread and density of scores.\nApplied geom_jitter to add jitter to the points, preventing overlap and improving the visibility of individual data points. This ensures that each data point especially the outlier is distinct and contributes to a clearer representation of the dataset.\n\nAesthetics Improvements\n\nCenter-aligned the plot titles (“Relationship: ESC status and Performance”) for enhanced visual appeal and overall design coherence.\nUsed scale_color_manual for the customization of colors for each ESC status. This not only contributes to improved clarity by differentiating between categories but also enhances the overall aesthetics of the plots. Distinct colors make the visual representation more appealing."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4A.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4A.html",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter A we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4A.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4A.html#learning-outcome",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter A we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4A.html#getting-started",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\nggdist for visualising distribution and uncertainty.\n\n\n\nCode\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\n2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4A.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4A.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "3 Visualising Distribution with Ridgeline Plot",
    "text": "3 Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#3459e6\"), color = \"blue\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nWhat I did\n\n\n\nI adjusted the colors to a blue shade, set the line color to “blue,” and chose a minimal theme (theme_minimal()) for a different visual style compared to the provided version.\n\n\n\n\n3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_minimal()\n\n\n\n\n\n\n\n3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\nCode\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument in .calc_ecdf = TRUEstat_density_ridges()\n\n\n\n\n3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated aesthetic as shown in the figure below.stat(quantile)\n\n\nCode\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_minimal()\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\nCode\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"skyblue\", \"#A0A0A0A0\",\"#3459e6\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4A.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4A.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on Exercise 4A: Visualising Distribution",
    "section": "4 Visualising Distribution with Raincloud Plot",
    "text": "4 Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               fill = \"#3459e6\")+\n  theme_minimal()\n\n\n\n\n\n\n\n4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               fill = \"#3459e6\") +\n  geom_boxplot(width = .20,\n               outlier.shape = NA,\n               fill = \"skyblue\")+\n  theme_minimal()\n\n\n\n\n\n\n\n4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               fill = \"#3459e6\") +\n  geom_boxplot(width = .20,\n               outlier.shape = NA,\n               fill = \"skyblue\")+\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2,\n            color = \"blue\")+\n  theme_minimal()\n\n\n\n\n\n\n\n4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, of ggthemes package is used to give the raincloud chart a professional publishing standard look.theme_economist()\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               fill = \"#3459e6\") +\n  geom_boxplot(width = .20,\n               outlier.shape = NA,\n               fill = \"skyblue\")+\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5,\n            color = \"blue\")+\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nWhat I did\n\n\n\nI adjusted the colors by using various shades of blue (#3459e6, “skyblue”, and “blue”) for different elements. Additionally, you changed the theme from theme_economist() to theme_minimal(). Furthermore, I increased the width and height of the plot for better visualization ({r, fig.width=8, fig.height=8})."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html",
    "title": "Hands-on Exercise 4B: Visual Statistical Analysis",
    "section": "",
    "text": "ggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Exercise 4B: Visual Statistical Analysis",
    "section": "",
    "text": "ggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html#getting-started",
    "title": "Hands-on Exercise 4B: Visual Statistical Analysis",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\n\nCode\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n2.2 Importing data\nFor the purpose of this exercise, Exam_data.csv will be used.\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\")\nhead(exam,10)\n\n\n# A tibble: 10 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n\n\n\n\n2.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\n\nCode\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)+theme_minimal()\n\n\n\n\n\n\n\n2.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n2.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n2.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\nCode\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n2.7 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\n\nCode\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)+theme_minimal()\n\n\n\n\n\n\n\n2.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\nCode\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )+theme_minimal()\n\n\n\n\n\n\n\n2.9 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\n\nCode\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\n\nCode\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)+theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html#visualising-models",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html#visualising-models",
    "title": "Hands-on Exercise 4B: Visual Statistical Analysis",
    "section": "3 Visualising Models",
    "text": "3 Visualising Models\nIn this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html#getting-started-1",
    "title": "Hands-on Exercise 4B: Visual Statistical Analysis",
    "section": "4 Getting Started",
    "text": "4 Getting Started"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4B.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 4B: Visual Statistical Analysis",
    "section": "5 Installing and loading the required libraries",
    "text": "5 Installing and loading the required libraries\n\n\nCode\npacman::p_load(readxl, performance, parameters, see)\n\n\n\n5.1 Importing Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\n\nCode\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\n5.2 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\n\nCode\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n5.3 Model Diagnostic: checking for multicolinearity:\nIn the code chunk, check_collinearity() of performance package.\n\n\nCode\ncheck_collinearity(model)\n\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\n\nCode\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n5.4 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\n\nCode\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n &lt;- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n\n\n5.5 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\n\nCode\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\n\n5.6 Model Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\n\nCode\ncheck_model(model1)\n\n\n\n\n\n\n\n5.7 Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\n\nCode\nplot(parameters(model1))\n\n\n\n\n\n\n\n5.8 Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\n\nCode\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\n\nCode\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\n\n\nCode\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html#getting-started",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\n\nCode\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\n\n\nCode\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "2 Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "2 Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\n\nCode\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\n\nCode\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n2.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"#3459e6\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")+\n  theme_minimal()\n\n\n\n\n\n\n\n2.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"#3459e6\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")+\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\n2.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\n\nCode\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"#3459e6\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "3 Visualising Uncertainty: ggdist package",
    "text": "3 Visualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n3.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS) ) +\n  stat_pointinterval(color = \"#3459e6\",point_color = \"red\") +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")+theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi,color = \"#3459e6\",point_color = \"red\") +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")+theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nWhat I learnt…\n\n\n\n\n.width: It controls the width of the confidence interval. It specifies the size of the confidence interval, usually a decimal between 0 and 1. For example, .width = 0.95 indicates a confidence interval width of 95%, a common choice.\n.point: It determines the statistic used to represent the central point. It can be a string specifying the statistic to use, such as \"mean\", \"median\", and so on. In the example, .point = \"median\" means that the median will be used to represent the central point.\n.interval: It defines the method used to calculate the confidence interval. It can be a string indicating the calculation method, such as \"qi\" (quantile-based interval), \"ci\" (confidence interval), etc. In the example, .interval = \"qi\" means using quantiles to calculate the confidence interval.\n\n\n\n\n\n3.2 Visualizing the uncertainty of point estimates: ggdist methods\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.99,\n  .point = median,\n  .interval = qi,color = \"#3459e6\",point_color = \"red\") +\n  labs(\n    title = \"Visualising confidence intervals of median math score (99% confidence intervals)\",\n    subtitle = \"Median Point + Multiple-interval plot\")+theme_minimal()\n\n\n\n\n\n\n\n3.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(  fill = \"skyblue\", \n    color = \"#3459e6\",   point_color = \"red\", \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")+\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "4 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "4 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nStep 1: Installing ungeviz package\n\n\nCode\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\nStep 2: Launch the application in R\n\n\nCode\nlibrary(ungeviz)\n\n\n\n\nCode\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#3459e6\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"coral\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4C.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on Exercise 4C: Visualising Uncertainty",
    "section": "5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\n\nCode\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, color = \"#3459e6\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"coral\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#overview",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "2 Installing and Launching R Packages",
    "text": "2 Installing and Launching R Packages\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\n\nCode\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#importing-data",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "3 Importing Data",
    "text": "3 Importing Data\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\n\nCode\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\nhead(covid19,5)\n\n\n# A tibble: 5 × 7\n  `Sub-district ID` City        District `Sub-district` Positive Recovered Death\n              &lt;dbl&gt; &lt;fct&gt;       &lt;fct&gt;    &lt;fct&gt;             &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1        3172051003 JAKARTA UT… PADEMAN… ANCOL              1776      1691    26\n2        3173041007 JAKARTA BA… TAMBORA  ANGKE              1783      1720    29\n3        3175041005 JAKARTA TI… KRAMAT … BALE KAMBANG       2049      1964    31\n4        3175031003 JAKARTA TI… JATINEG… BALI MESTER         827       797    13\n5        3175101006 JAKARTA TI… CIPAYUNG BAMBU APUS         2866      2792    27"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#funnelplotr-methods",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "4 FunnelPlotR methods",
    "text": "4 FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\n\nCode\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n4.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\n\nCode\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\n\nCode\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers.  Plot is adjusted for overdispersion. \nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "5 Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "5 Funnel Plot for Fair Visual Comparison: ggplot2 methods\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\n\nCode\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nNext, the fit.mean is computed by using the code chunk below.\n\n\nCode\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\n5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\n\nCode\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\n5.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\n\nCode\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4, color= \"#3459e6\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))+\n  theme_minimal()\np\n\n\n\n\n\n\n\n5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\n\nCode\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex4D.html#references",
    "title": "Hands-on Exercise 4D: Funnel Plots for Fair Comparisons",
    "section": "6 References",
    "text": "6 References\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#overview",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "2 Installing and Launching R Packages",
    "text": "2 Installing and Launching R Packages\nBefore you get started, you are required:\n\nto start a new R project, and\nto create a new R Markdown document.\n\nNext, you will use the code chunk below to install and launch corrplot, ggpubr, plotly and tidyverse in RStudio.\n\n\nCode\npacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#importing-and-preparing-the-data-set",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "3 Importing and Preparing The Data Set",
    "text": "3 Importing and Preparing The Data Set\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\n3.1 Importing Data\nFirst, let us import the data into R by using read_csv() of readr package.\n\n\nCode\nwine &lt;- read_csv(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#building-correlation-matrix-pairs-method",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#building-correlation-matrix-pairs-method",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "4 Building Correlation Matrix: pairs() method",
    "text": "4 Building Correlation Matrix: pairs() method\nThere are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the pairs function of R Graphics.\nBefore you continue to the next step, you should read the syntax description of pairsfunction.\n\n4.1 Building a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\n\nCode\npairs(wine[,1:11])\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\nCode\npairs(wine[,2:12])\n\n\n\n\n\n\n\n4.2 Drawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\n\nCode\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\n\nCode\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n4.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\n\nCode\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#visualising-correlation-matrix-ggcormat",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#visualising-correlation-matrix-ggcormat",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "5 Visualising Correlation Matrix: ggcormat()",
    "text": "5 Visualising Correlation Matrix: ggcormat()\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nThe are at least three R packages provide function to plot corrgram, they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\nIn this section, you will learn how to visualising correlation matrix by using ggcorrmat() of ggstatsplot package.\n\n5.1 The basic plot\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\n\nCode\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\nCode\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\nCode\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#building-multiple-plots",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#building-multiple-plots",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "6 Building multiple plots",
    "text": "6 Building multiple plots\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\n\nCode\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\nThings to learn from the code chunk above:\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#visualising-correlation-matrix-using-corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#visualising-correlation-matrix-using-corrplot-package",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "7 Visualising Correlation Matrix using corrplot Package",
    "text": "7 Visualising Correlation Matrix using corrplot Package\nIn this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.\nBefore getting started, you are required to read An Introduction to corrplot Package in order to gain basic understanding of corrplot package.\n\n7.1 Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\n\nCode\nwine.cor &lt;- cor(wine[, 1:11])\n\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\nCode\ncorrplot(wine.cor)\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n\n7.2 Working with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\nFeel free to change the method argument to other supported visual geometrics.\n\n\n7.3 Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them.\n\n\n7.4 Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\n7.5 Combining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\n\nCode\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\n\nCode\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n7.6 Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n7.7 Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05B.html#reference",
    "title": "Hands-on Exercise 5B: Visual Correlation Analysis",
    "section": "8 Reference",
    "text": "8 Reference\nMichael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. The American Statistician, 56, 316–324.\nD.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. The American Statistician, 50, 178–180.\n\n8.1 R packages\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html",
    "title": "Hands-on Exercise 5A: Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#overview",
    "title": "Hands-on Exercise 5A: Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5A: Creating Ternary Plot with R",
    "section": "2 Installing and launching R packages",
    "text": "2 Installing and launching R packages\nFor this exercise, two main R packages will be used in this hands-on exercise, they are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\nWe will also need to ensure that selected tidyverse family packages namely: readr, dplyr and tidyr are also installed and loaded.\nIn this exercise, version 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2. This is because the current version of ggtern package is not compatible to the latest version of ggplot2.\nThe code chunks below will accomplish the task.\n\n\nCode\npacman::p_load('plotly', 'tidyverse')\n\n\n\n\nCode\nrequire(devtools)\ninstall_version(\"ggtern\", version = \"3.4.1\", repos = \"http://cran.us.r-project.org\")\n\n\n\n\nCode\nlibrary(ggtern)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#data-preparation",
    "title": "Hands-on Exercise 5A: Creating Ternary Plot with R",
    "section": "3 Data Preparation",
    "text": "3 Data Preparation\n\n3.1 The data\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format.\n\n\n3.2 Importing Data\nTo important respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\n\n\nCode\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\n\n3.3 Preparing the Data\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n\nCode\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05A.html#plotting-ternary-diagram-with-r",
    "title": "Hands-on Exercise 5A: Creating Ternary Plot with R",
    "section": "4 Plotting Ternary Diagram with R",
    "text": "4 Plotting Ternary Diagram with R\n\n4.1 Plotting a static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n\nCode\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point(color = \"#3459e6\")\n\n\n\n\n\n\n\nCode\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point(color = \"#3459e6\") +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n4.2 Plotting an interative ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n\nCode\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"white\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"#3459e6\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#overview",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2 Installing and Launching R Packages",
    "text": "2 Installing and Launching R Packages\nBefore you get started, you are required:\n\nto start a new R project, and\nto create a new R Markdown document.\n\nNext, you will use the code chunk below to install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\n\nCode\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#importing-and-preparing-the-data-set",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3 Importing and Preparing The Data Set",
    "text": "3 Importing and Preparing The Data Set\nIn this hands-on exercise, the data of World Happines 2018 report will be used. The data set is downloaded from here. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\n3.1 Importing the data set\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\n\nCode\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\nThe output tibbled data frame is called wh.\n\n\n3.2 Preparing the data\nNext, we need to change the rows by country name instead of row number by using the code chunk below\n\n\nCode\nrow.names(wh) &lt;- wh$Country\n\n\n\n\n3.3 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\n\nCode\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\n\nNotice that wh_matrix is in R matrix format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#static-heatmap",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4 Static Heatmap",
    "text": "4 Static Heatmap\nThere are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nIn this section, you will learn how to plot static heatmaps by using heatmap() of R Stats package.\n\n4.1 heatmap() of R Stats\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\n\nCode\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\nNote:\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\n\nCode\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\n\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\n\nCode\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#creating-interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05C.html#creating-interactive-heatmap",
    "title": "Hands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5 Creating Interactive Heatmap",
    "text": "5 Creating Interactive Heatmap\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nBefore we get started, you should review the Introduction to Heatmaply to have an overall understanding of the features and functions of Heatmaply package. You are also required to have the user manualof the package handy with you for reference purposes.\nIn this section, you will gain hands-on experience on using heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\n5.1 Working with heatmaply\n\n\nCode\nheatmaply(mtcars)\n\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\n\nCode\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\n5.2 Data trasformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\n5.2.1 Scaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\n\nCode\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n5.2.2 Normalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n5.2.3 Percentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\nCode\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n\n5.3 Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n\n5.4 Manual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\n5.5 Statistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\n\nCode\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\n\nCode\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\n5.6 Seriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\n\n5.7 Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\n\nCode\ncustom_palette &lt;- colorRampPalette(c(\"white\", \"#3459e6\"))\n\n# Assuming wh_matrix is your data frame\n# You may need to replace it with your actual data frame\n# Also, the normalize() function may not be necessary depending on your data\n\nheatmaply(\n  normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n  seriate = \"none\",\n  col = custom_palette(100)  # Adjust the number based on your preference\n)\n\n\n\n\n\n\n\n\n5.8 The finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\n\nCode\ncustom_palette &lt;- colorRampPalette(c(\"white\", \"#3459e6\"))\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          col = custom_palette(100),\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\",\n          cex.main = 0.5,\n          cex.lab = 0.5 \n          )\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nCustom Color Palette: Created a custom color gradient using colorRampPalette and applied it to the heatmap using the col parameter. This customization provides a more personalized and visually appealing color scheme.\nFont Size Adjustment: Adjusted the font size of the main title (cex.main) and axis labels (cex.lab). This enhances readability and makes the visual elements more proportionate.\nAdjustment of Graph Height: Set the height of the entire R code block’s figure using {r fig.height=10}, which might be helpful for better layout and presentation in a document."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#overview",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2 Installing and Launching R Packages",
    "text": "2 Installing and Launching R Packages\nFor this exercise, the GGally, parcoords, parallelPlot and tidyverse packages will be used.\nThe code chunks below are used to install and load the packages in R.\n\n\nCode\npacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#data-preparation",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "3 Data Preparation",
    "text": "3 Data Preparation\nIn this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\nIn the code chunk below, read_csv() of readr package is used to import WHData-2018.csv into R and save it into a tibble data frame object called wh.\n\n\nCode\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#plotting-static-parallel-coordinates-plot",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "4 Plotting Static Parallel Coordinates Plot",
    "text": "4 Plotting Static Parallel Coordinates Plot\nIn this section, you will learn how to plot static parallel coordinates plot by using ggparcoord() of GGally package. Before getting started, it is a good practice to read the function description in detail.\n\n4.1 15.4.1 Plotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\n4.2 Plotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\n4.3 Parallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n4.4 Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n\n\n4.5 Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5 Plotting Interactive Parallel Coordinates Plot: parallelPlot methods",
    "text": "5 Plotting Interactive Parallel Coordinates Plot: parallelPlot methods\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\n5.1 The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\n\nCode\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step.\n\n\n5.2 Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\n\nCode\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.\n\n\n5.3 Changing the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\n\nCode\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\n\n5.4 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\n\nCode\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05D.html#references",
    "title": "Hands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "6 References",
    "text": "6 References\n\nggparcoord() of GGally package\nparcoords user guide\nparallelPlot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#overview",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "2 Installing and Launching R Packages",
    "text": "2 Installing and Launching R Packages\nBefore we get started, you are required to check if treemap and tidyverse pacakges have been installed in you R.\n\n\nCode\npacman::p_load(treemap, treemapify, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#data-wrangling",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "3 Data Wrangling",
    "text": "3 Data Wrangling\nIn this exercise, REALIS2018.csv data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).\n\n3.1 Importing the data set\nIn the code chunk below, read_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format.\n\n\nCode\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\n\n3.2 Data Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\n\n\n\n\nRecommendation\n\n\n\nI am new to dplyr methods should consult Introduction to dplyr before moving on to the next section.\n\n\n\n\n3.3 Grouped summaries without the Pipe\nThe code chank below shows a typical two lines code approach to perform the steps.\n\n\nCode\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\n\n3.4 Grouped summaries with the pipe\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\n\n\n\n\n\nRecommendation\n\n\n\nTo learn more about pipe, visit this excellent article: Pipes in R Tutorial For Beginners.\n\n\n\n\nCode\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-treemap-with-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-treemap-with-treemap-package",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "4 Designing Treemap with treemap Package",
    "text": "4 Designing Treemap with treemap Package\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\n4.1 Designing a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\n\nCode\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\n\n4.2 Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\nWarning:\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\n4.3 Working with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThinking to learn from the conde chunk above.\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n\n4.4 Colours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\n4.5 The “value” type treemap\nThe code chunk below shows a value type treemap.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThing to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\n4.6 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThings to learn from the code chunk above:\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n4.7 Treemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\n4.8 Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n4.9 Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-treemap-using-treemapify-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-treemap-using-treemapify-package",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "5 Designing Treemap using treemapify Package",
    "text": "5 Designing Treemap using treemapify Package\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using treemapify. Before you getting started, you should read Introduction to “treemapify” its user guide.\n\n5.1 Designing a basic treemap\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"skyblue\", high = \"#3459e6\")\n\n\n\n\n\n\n\n5.2 Defining hierarchy\nGroup by Planning Region\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\nGroup by Planning Area\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\nAdding boundary line\n\n\nCode\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05E.html#designing-interactive-treemap-using-d3treer",
    "title": "Hands-on Exercise 5E: Treemap Visualisation with R",
    "section": "6 Designing Interactive Treemap using d3treeR",
    "text": "6 Designing Interactive Treemap using d3treeR\n\n6.1 Installing d3treeR package\nThis slide shows you how to install a R package which is not available in cran.\n\nIf this is the first time you install a package from github, you should install devtools package by using the code below or else you can skip this step.\n\n\n\nCode\ninstall.packages(\"devtools\")\n\n\n\nNext, you will load the devtools library and install the package found in github by using the codes below.\n\n\n\nCode\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\n\nNow you are ready to launch d3treeR package\n\n\n\nCode\nlibrary(d3treeR)\n\n\n\n\n6.2 Designing An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\n\nCode\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\n\nCode\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Loading R packages\nWrite a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse,plotly)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "3 Plotting Calendar Heatmap",
    "text": "3 Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmatically by using ggplot2 package.\n\n\n\nBy the end of this section, you will be able to:\n\n\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\n3.1 The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n3.2 Importing the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n3.3 Examining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n3.4 Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nprocessed_attacks &lt;- attacks %&gt;%\n  do(make_hr_wkday(.$timestamp, .$source_country, .$tz))\nprocessed_attacks &lt;- bind_cols(tz = attacks$tz, processed_attacks) %&gt;%\n  mutate(wkday = factor(wkday),\n         hour = factor(hour)) %&gt;%\n  arrange(tz)\n\n# rename processed_attacks with attacks\nassign(\"attacks\", processed_attacks)\n\n#Check the data frame\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\n星期六\n20\n\n\nAfrica/Cairo\nTW\n星期日\n6\n\n\nAfrica/Cairo\nTW\n星期日\n8\n\n\nAfrica/Cairo\nCN\n星期日\n11\n\n\nAfrica/Cairo\nUS\n星期日\n15\n\n\nAfrica/Cairo\nCA\n星期一\n11\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\n星期六\n20\n\n\nAfrica/Cairo\nTW\n星期日\n6\n\n\nAfrica/Cairo\nTW\n星期日\n8\n\n\nAfrica/Cairo\nCN\n星期日\n11\n\n\nAfrica/Cairo\nUS\n星期日\n15\n\n\nAfrica/Cairo\nCA\n星期一\n11\n\n\n\n\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n3.5 Building the Calendar Heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1)  + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\nWhat I can learn\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n3.6 Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\n3.7 Plotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\n\ntop4 &lt;- attacks_by_country %&gt;%  top_n(4, wt= n) %&gt;% pull(source_country)\n\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n3.8 Plotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n\n\n\n\n\n\n3.9 Plotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n3.10 Plotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "",
    "text": "According to an office report as shown in the infographic below,\n\nDaily mean temperature are projected to increase by 1.4 to 4.6, and\nThe contrast between the wet months (November to January) and dry month (February and June to September) is likely to be more pronounced."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-preparation",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "3 Data Preparation",
    "text": "3 Data Preparation\n\n3.1 Loading R packages\nIn this exercise, four R packages will be used. They are:\n\nreadr: Used for reading and importing CSV files. Functions like read_csv are part of the readr package.\ndplyr: Used for data manipulation and analysis. Functions like bind_rows, select, group_by, and summarize are part of the dplyr package.\nggplot2: Used for creating static and dynamic (with ggplotly) plots and visualizations.\nplotly: Used for creating interactive plots and visualizations. Functions like plot_ly and ggplotly are part of the plotly package.\n\n\n\nCode\npacman::p_load(\"readr\", \"dplyr\", \"ggplot2\", \"plotly\")\n\n\n\n\n3.2 Importing data\nIn this exercise, we will be working with the daily rainfall records for the month of August in the years 1983, 1993, 2003, 2013, and 2023 in the area of Changi. We will import the data for these five years using the \"read.csv\" function.\n\n\nCode\nchangi198308 &lt;- read.csv(\"data/DAILYDATA_S24_198308.csv\",fileEncoding = \"ISO-8859-1\")\nchangi199308 &lt;- read.csv(\"data/DAILYDATA_S24_199308.csv\", fileEncoding = \"ISO-8859-1\")\nchangi200308 &lt;- read.csv(\"data/DAILYDATA_S24_200308.csv\", fileEncoding = \"ISO-8859-1\")\nchangi201308 &lt;- read.csv(\"data/DAILYDATA_S24_201308.csv\", fileEncoding = \"ISO-8859-1\")\nchangi202308 &lt;- read.csv(\"data/DAILYDATA_S24_202308.csv\")\n\n\n\n\nCode\ncolnames(changi198308)\n\n\n [1] \"Station\"                       \"Year\"                         \n [3] \"Month\"                         \"Day\"                          \n [5] \"Daily.Rainfall.Total..mm.\"     \"Highest.30.Min.Rainfall..mm.\" \n [7] \"Highest.60.Min.Rainfall..mm.\"  \"Highest.120.Min.Rainfall..mm.\"\n [9] \"Mean.Temperature...C.\"         \"Maximum.Temperature...C.\"     \n[11] \"Minimum.Temperature...C.\"      \"Mean.Wind.Speed..km.h.\"       \n[13] \"Max.Wind.Speed..km.h.\"        \n\n\nCode\ncolnames(changi199308)\n\n\n [1] \"Station\"                       \"Year\"                         \n [3] \"Month\"                         \"Day\"                          \n [5] \"Daily.Rainfall.Total..mm.\"     \"Highest.30.Min.Rainfall..mm.\" \n [7] \"Highest.60.Min.Rainfall..mm.\"  \"Highest.120.Min.Rainfall..mm.\"\n [9] \"Mean.Temperature...C.\"         \"Maximum.Temperature...C.\"     \n[11] \"Minimum.Temperature...C.\"      \"Mean.Wind.Speed..km.h.\"       \n[13] \"Max.Wind.Speed..km.h.\"        \n\n\nCode\ncolnames(changi200308)\n\n\n [1] \"Station\"                       \"Year\"                         \n [3] \"Month\"                         \"Day\"                          \n [5] \"Daily.Rainfall.Total..mm.\"     \"Highest.30.Min.Rainfall..mm.\" \n [7] \"Highest.60.Min.Rainfall..mm.\"  \"Highest.120.Min.Rainfall..mm.\"\n [9] \"Mean.Temperature...C.\"         \"Maximum.Temperature...C.\"     \n[11] \"Minimum.Temperature...C.\"      \"Mean.Wind.Speed..km.h.\"       \n[13] \"Max.Wind.Speed..km.h.\"        \n\n\nCode\ncolnames(changi201308)\n\n\n [1] \"Station\"                       \"Year\"                         \n [3] \"Month\"                         \"Day\"                          \n [5] \"Daily.Rainfall.Total..mm.\"     \"Highest.30.Min.Rainfall..mm.\" \n [7] \"Highest.60.Min.Rainfall..mm.\"  \"Highest.120.Min.Rainfall..mm.\"\n [9] \"Mean.Temperature...C.\"         \"Maximum.Temperature...C.\"     \n[11] \"Minimum.Temperature...C.\"      \"Mean.Wind.Speed..km.h.\"       \n[13] \"Max.Wind.Speed..km.h.\"        \n\n\nCode\ncolnames(changi202308)\n\n\n [1] \"Station\"                       \"Year\"                         \n [3] \"Month\"                         \"Day\"                          \n [5] \"Daily.Rainfall.Total..mm.\"     \"Highest.30.min.Rainfall..mm.\" \n [7] \"Highest.60.min.Rainfall..mm.\"  \"Highest.120.min.Rainfall..mm.\"\n [9] \"Mean.Temperature...C.\"         \"Maximum.Temperature...C.\"     \n[11] \"Minimum.Temperature...C.\"      \"Mean.Wind.Speed..km.h.\"       \n[13] \"Max.Wind.Speed..km.h.\"        \n\n\nBy examining the variable names, we observe that the variable names are consistent across all tables. Consequently, we can merge the data from all five tables into a single unified dataset by using bind_rows.\n\n\nCode\nchangi &lt;- bind_rows(changi198308, changi199308, changi200308, changi201308, changi202308)\n\nsummary(changi)\n\n\n   Station               Year          Month        Day    \n Length:155         Min.   :1983   Min.   :8   Min.   : 1  \n Class :character   1st Qu.:1993   1st Qu.:8   1st Qu.: 8  \n Mode  :character   Median :2003   Median :8   Median :16  \n                    Mean   :2003   Mean   :8   Mean   :16  \n                    3rd Qu.:2013   3rd Qu.:8   3rd Qu.:24  \n                    Max.   :2023   Max.   :8   Max.   :31  \n                                                           \n Daily.Rainfall.Total..mm. Highest.30.Min.Rainfall..mm.\n Min.   :  0.000           Length:155                  \n 1st Qu.:  0.000           Class :character            \n Median :  0.000           Mode  :character            \n Mean   :  5.434                                       \n 3rd Qu.:  3.750                                       \n Max.   :181.800                                       \n                                                       \n Highest.60.Min.Rainfall..mm. Highest.120.Min.Rainfall..mm.\n Length:155                   Length:155                   \n Class :character             Class :character             \n Mode  :character             Mode  :character             \n                                                           \n                                                           \n                                                           \n                                                           \n Mean.Temperature...C. Maximum.Temperature...C. Minimum.Temperature...C.\n Min.   :25.50         Min.   :27.80            Min.   :21.60           \n 1st Qu.:27.70         1st Qu.:31.10            1st Qu.:24.65           \n Median :28.50         Median :31.90            Median :25.80           \n Mean   :28.29         Mean   :31.66            Mean   :25.56           \n 3rd Qu.:28.95         3rd Qu.:32.40            3rd Qu.:26.70           \n Max.   :30.10         Max.   :33.90            Max.   :28.20           \n                                                                        \n Mean.Wind.Speed..km.h. Max.Wind.Speed..km.h. Highest.30.min.Rainfall..mm.\n Min.   : 2.90          Min.   :23.0          Min.   : 0.000              \n 1st Qu.: 7.70          1st Qu.:31.6          1st Qu.: 0.000              \n Median :10.50          Median :36.0          Median : 0.000              \n Mean   :10.34          Mean   :37.0          Mean   : 2.219              \n 3rd Qu.:12.70          3rd Qu.:40.7          3rd Qu.: 2.400              \n Max.   :18.10          Max.   :75.6          Max.   :16.400              \n                                              NA's   :124                 \n Highest.60.min.Rainfall..mm. Highest.120.min.Rainfall..mm.\n Min.   : 0.000               Min.   : 0.000               \n 1st Qu.: 0.000               1st Qu.: 0.000               \n Median : 0.000               Median : 0.000               \n Mean   : 2.458               Mean   : 2.813               \n 3rd Qu.: 3.200               3rd Qu.: 3.700               \n Max.   :16.400               Max.   :16.600               \n NA's   :124                  NA's   :124                  \n\n\nIt is evident that numerous variables contain NA values. We will exclude the variables with NA values, and as this exercise focuses solely on the variation in rainfall, we will remove temperature-related variables. The remaining variables will be renamed appropriately.\n\n\nCode\nnames(changi) &lt;- c(\"Station\", \"Year\", \"Month\", \"Day\", \n               \"Daily Rainfall Total (mm)\")\n\nchangi &lt;- changi[ c(\"Year\", \"Month\", \"Day\", \n             \"Daily Rainfall Total (mm)\")]\n\n\nWe will merge the columns for year, month, and day into a new column with a date format. Retain the original year, month, and day columns for future filtering purposes.\n\n\nCode\nchangi$Date &lt;- as.Date(paste(changi$Year, changi$Month, changi$Day, sep = \"-\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#overview",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#overview",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "",
    "text": "According to an office report as shown in the infographic below,\n\nDaily mean temperature are projected to increase by 1.4 to 4.6, and\nThe contrast between the wet months (November to January) and dry month (February and June to September) is likely to be more pronounced."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#objective",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#objective",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "2 Objective",
    "text": "2 Objective\n\nSelect a weather station and download historical daily temperature or rainfall data from Meteorological Service Singapore website,\nSelect either daily temperature or rainfall records of a month of the year 1983, 1993, 2003, 2013 and 2023 and create an analytics-driven data visualisation,\nApply appropriate interactive techniques to enhance the user experience in data discovery and/or visual story-telling."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-interacitive-visulization",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-interacitive-visulization",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4 Data Interacitive Visulization",
    "text": "4 Data Interacitive Visulization\n\nchangi$Year &lt;- as.factor(changi$Year)\n\n\ncolor_palette &lt;- c(\"#3459e6\", \"#e63491\", \"skyblue\", \"#fccb41\", \"#9c52d9\")\n\n# Create the ggplot with custom colors\np1 &lt;- ggplot(changi, aes(x = Year, y = `Daily Rainfall Total (mm)`, fill = Year)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Daily Rainfall Total in August (1983-2023)\",\n       x = \"Year\",\n       y = \"Daily Rainfall Total (mm)\"\n  ) +\n  scale_fill_manual(values = setNames(color_palette, levels(changi$Year))) +\n  theme_minimal()\n\ninteractive_plot1 &lt;- ggplotly(p1)\n\n# Display the interactive plot\ninteractive_plot1\n\n\n\n\n\n\np2 &lt;- changi %&gt;%\n  plot_ly(x = ~Day, \n          y = ~`Daily Rainfall Total (mm)`, \n          frame = ~Year, \n          type = 'bar',\n          hoverinfo = ~ 'y',\n          marker = list(color = \"#3459e6\")) %&gt;%\n  layout(showlegend = FALSE)\n\np2\n\n\n\n\n\n\np3 &lt;- plot_ly(changi, x = ~Year, y = ~Day, z = ~`Daily Rainfall Total (mm)`, type = \"heatmap\", colorscale = \"Viridis\") %&gt;%\n  layout(title = \"Rainfall Heatmap in August (1983-2023)\",\n         xaxis = list(title = \"Year\"),\n         yaxis = list(title = \"Day\"))\n\n\np3\n\n\n\n\n\n\ncolor_palette &lt;- c(\"#3459e6\", \"#e63491\", \"skyblue\", \"#fccb41\", \"#9c52d9\")\np4 &lt;- ggplot() + \n  geom_line(data = changi,\n            aes(x = Day, \n                y = `Daily Rainfall Total (mm)`, \n                group = Year, \n                color = Year),  \n            size = 1) +\n  scale_color_manual(values = setNames(color_palette, levels(changi$Year)))+\n  facet_grid(~Year) +\n  labs(axis.text.x = element_blank(),\n       title = \"Changi Daily Rainfall Total Over Days by Year\") +\n  xlab(\"Day\") +\n  ylab(\"Daily Rainfall Total (mm)\") +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    panel.grid.major = element_line(color = \"lightgray\"),\n    panel.grid.minor = element_blank(),\n    axis.line = element_line(color = \"darkgrey\"),\n    legend.position = \"none\",\n    plot.title = element_text(hjust = 0.5))\n\n# 转换 ggplot 为 plotly\ninteractive_plot2 &lt;- ggplotly(p4)\n\n# 显示交互式图\ninteractive_plot2\n\n\n\n\n\n\naverage_precipitation &lt;- changi %&gt;%\n  group_by(Year) %&gt;%\n  summarize(AvgPrecipitation = mean(`Daily Rainfall Total (mm)`, na.rm = TRUE))\n\np5 &lt;- ggplot(average_precipitation, aes(x = Year, y = AvgPrecipitation , fill = Year)) +\n  geom_col() +\n  labs(title = \"Average Daily Rainfall Total by Year\",\n       x = \"Year\",\n       y = \"Average Daily Rainfall Total (mm)\") +\n  scale_fill_manual(values = setNames(color_palette, levels(changi$Year))) +\n  theme_minimal()\n\n# Convert ggplot to plotly\ninteractive_plot3 &lt;- ggplotly(p5)\n\n# Show the interactive plot\ninteractive_plot3\n\n\n\n\n\n\ncombined_plot &lt;- subplot(\n  interactive_plot1,\n  subplot(\n    interactive_plot2,\n    interactive_plot3,\n    nrows = 2,\n    shareX = TRUE\n  ),\n  nrows = 1,\n  titleX = TRUE  # Set this to TRUE to show titles along the X-axis\n)\n\n# Display the combined plot with a common title\ncombined_plot &lt;- combined_plot %&gt;% layout(title = \"Interactive  Rianfall Data Visualization\")\n\n# Show the combined plot\ncombined_plot"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-interaction-visualisation",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-interaction-visualisation",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4 Data Interaction Visualisation",
    "text": "4 Data Interaction Visualisation\n\n4.1 Animated Interactive Bar Chart of Daily Rainfall by year\nWe create an interactive bar chart using the plot_ly function, with daily rainfall totals plotted against the day of the month across the years of 1983, 1993, 2003, 2013, and 2023.\n\n\nCode\np2 &lt;- changi %&gt;%\n  plot_ly(x = ~Day, \n          y = ~`Daily Rainfall Total (mm)`, \n          frame = ~Year, \n          type = 'bar',\n          hoverinfo = ~ 'y',\n          marker = list(color = \"#3459e6\")) %&gt;%\n  layout(showlegend = FALSE)\n\np2\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe chart provides a dynamic and interactive way to explore how daily rainfall varies across different days of the month, with a focus on comparing this variation across multiple years. The animation allows for a temporal understanding of rainfall patterns.\n\nX-axis (Day): The days of the month are plotted along the x-axis, indicating the progression of time within each month.\nY-axis (Daily Rainfall Total (mm)): The y-axis represents the daily rainfall totals in millimeters. Each bar’s height corresponds to the amount of rainfall recorded on a specific day.\nColor and Animation (Year): The bars are color-coded, and the chart is animated based on the “Year” variable. Each frame of the animation corresponds to a different year, allowing you to observe how daily rainfall patterns change across multiple years.\nHover Information (hoverinfo = ~ 'y'): When you hover over a specific bar, the information displayed includes the y-value, which is the corresponding daily rainfall total for that day.\n\n\n\n\n\n4.2 Interactive Daily Rainfall Heatmap\nWe generate a heatmap using the plot_ly function from the plotly package. This heatmap visualizes the daily rainfall records for the Changi area in the month of August across the years of 1983, 1993, 2003, 2013, and 2023.\n\n\nCode\np3 &lt;- plot_ly(changi, x = ~Year, y = ~Day, z = ~`Daily Rainfall Total (mm)`, type = \"heatmap\", colorscale = \"Viridis\") %&gt;%\n  layout(title = \"Rainfall Heatmap in August (1983-2023)\",\n         xaxis = list(title = \"Year\"),\n         yaxis = list(title = \"Day\"))\n\n\np3\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe heatmap offers a comprehensive view of how daily rainfall patterns vary across the month of August for each year from 1983 to 2023. It allows for easy identification of trends, such as specific days or years with higher or lower rainfall.\n\nX-axis (Year): The x-axis represents the years of 1983, 1993, 2003, 2013, and 2023. Each column in the heatmap corresponds to a specific year.\nY-axis (Day): The y-axis represents the days of the month (August). Each row in the heatmap corresponds to a specific day.\nZ-axis (Daily Rainfall Total (mm)): The color intensity at each intersection of the year and day represents the daily rainfall total in millimeters. Darker colors indicate higher rainfall, while lighter colors indicate lower rainfall.\n\n\n\n\n\n4.3 Interactive Boxplot of Daily Rainfall by year\nWe generate a an interactive boxplot using the ggplot2 and plotly packages. The boxplot visualizes the distribution of daily rainfall totals in August for the years of 1983, 1993, 2003, 2013, and 2023 in the Changi area.\n\n\nCode\nchangi$Year &lt;- as.factor(changi$Year)\n\n\ncolor_palette &lt;- c(\"#3459e6\", \"#e63491\", \"skyblue\", \"#fccb41\", \"#9c52d9\")\n\n# Create the ggplot with custom colors\np1 &lt;- ggplot(changi, aes(x = Year, y = `Daily Rainfall Total (mm)`, fill = Year)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Daily Rainfall Total in August (1983-2023)\",\n       x = \"Year\",\n       y = \"Daily Rainfall Total (mm)\"\n  ) +\n  scale_fill_manual(values = setNames(color_palette, levels(changi$Year))) +\n  theme_minimal()\n\ninteractive_plot1 &lt;- ggplotly(p1)\n\n# Display the interactive plot\ninteractive_plot1\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe interactive boxplot allows users to compare the distribution of daily rainfall totals across different years in August. It provides insights into the variability and central tendencies of rainfall patterns over the specified time frame.\n\nX-axis (Year): The x-axis represents the years from 1983, 1993, 2003, 2013, and 2023. Each boxplot is associated with a specific year, allowing for the comparison of rainfall distributions across years.\nY-axis (Daily Rainfall Total (mm)): The y-axis represents the daily rainfall totals in millimeters. The boxplots display the distribution of these values, including the median, quartiles, and potential outliers.\nBoxplots (geom_boxplot()): Each boxplot provides a summary of the distribution of daily rainfall for a specific year. The box itself represents the interquartile range (IQR), with the median indicated by a line inside the box. Whiskers extend to the minimum and maximum values within a certain range, and potential outliers may be displayed as individual points.\nInteractive Plot (ggplotly(p1)): The ggplotly function from the plotly package is used to convert the static ggplot object (p1) into an interactive plot, allowing for exploration and interaction with the data.\nCustom Colors (scale_color_manual): The color palette is specified using thecolor_palette` vector for better distinction between years.\n\n\n\n\n\n4.4 Interactive Line Plot of Daily Rainfall by year\nWe generate an interactive line plot using the ggplot2 and plotly packages to visualize the daily rainfall totals in the Changi area over days for the years 1983, 1993, 2003, 2013, and 2023.\n\n\nCode\ncolor_palette &lt;- c(\"#3459e6\", \"#e63491\", \"skyblue\", \"#fccb41\", \"#9c52d9\")\np4 &lt;- ggplot() + \n  geom_line(data = changi,\n            aes(x = Day, \n                y = `Daily Rainfall Total (mm)`, \n                group = Year, \n                color = Year),  \n            size = 1) +\n  scale_color_manual(values = setNames(color_palette, levels(changi$Year)))+\n  facet_grid(~Year) +\n  labs(axis.text.x = element_blank(),\n       title = \"Changi Daily Rainfall Total Over Days by Year\") +\n  xlab(\"Day\") +\n  ylab(\"Daily Rainfall Total (mm)\") +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    panel.grid.major = element_line(color = \"lightgray\"),\n    panel.grid.minor = element_blank(),\n    axis.line = element_line(color = \"darkgrey\"),\n    legend.position = \"none\",\n    plot.title = element_text(hjust = 0.5))\n\ninteractive_plot2 &lt;- ggplotly(p4)\n\ninteractive_plot2\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe interactive line plot allows user to visually explore the daily variation in rainfall totals for each day of August across different years in the Changi area. It facilitates the comparison of rainfall trends over time, offering insights into potential patterns or anomalies.\n\nX-axis (Day): The x-axis represents the days of the month (August).\nY-axis (Daily Rainfall Total (mm)): The y-axis represents the daily rainfall totals in millimeters.\nLines (geom_line()): Multiple lines are drawn, each corresponding to a specific year. The lines connect the daily rainfall totals for each day, providing a visual representation of the trend in rainfall over the month.\nColor (color = Year): Each line is colored based on the corresponding year, allowing for easy differentiation of data series.\nFaceting (`facet_grid(~Year)’): The plot is faceted by year, meaning that each year has its own subplot. This arrangement enables a direct comparison of rainfall patterns between different years.\nTheme Configuration (theme): Various theme elements are adjusted for aesthetics and clarity, including background color, grid lines, axis lines, and title alignment.\nInteractive Plot (ggplotly(p4)): The ggplotly function from the plotly package is used to convert the static ggplot object (p4) into an interactive plot, allowing for exploration and interaction with the data.\nCustom Colors (scale_color_manual): The color palette is specified using thecolor_palette` vector for better distinction between years.\n\n\n\n\n\n4.5 Interactive Bar chart of AVG Daily Rainfall by year\nWe calculate the annual average precipitation in the Changi area and then generate an interactive bar chart using the ggplot2 and plotly packages.\n\n\nCode\naverage_precipitation &lt;- changi %&gt;%\n  group_by(Year) %&gt;%\n  summarize(AvgPrecipitation = mean(`Daily Rainfall Total (mm)`, na.rm = TRUE))\n\np5 &lt;- ggplot(average_precipitation, aes(x = Year, y = AvgPrecipitation , fill = Year)) +\n  geom_col() +\n  labs(title = \"Average Daily Rainfall Total by Year\",\n       x = \"Year\",\n       y = \"Average Daily Rainfall Total (mm)\") +\n  scale_fill_manual(values = setNames(color_palette, levels(changi$Year))) +\n  theme_minimal()\n\n# Convert ggplot to plotly\ninteractive_plot3 &lt;- ggplotly(p5)\n\n# Show the interactive plot\ninteractive_plot3\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThis interactive bar chart illustrates the annual variations in average rainfall in the Changi area. Users can interactively explore and compare the average daily rainfall totals across different years.\n\nCompute Averages: Using the group_by and summarize functions, the changi data is grouped by year, and the average daily rainfall total for each year is calculated, creating a new data frame named average_precipitation.\nX-axis (Year): The x-axis represents different years.\nY-axis (AvgPrecipitation): The y-axis represents the annual average rainfall in millimeters.\nBar Chart (geom_col()): Each year is represented by a bar, where the height of the bar corresponds to the average rainfall for that year.\nColor (fill = Year): Each bar is colored based on the corresponding year, facilitating the differentiation of data for different years.\nInteractive Plot (ggplotly(p5)): The ggplotly function is used to convert the static ggplot object (p5) into an interactive plot, allowing users to explore and interact with the data.\nCustom Colors (scale_color_manual): The color palette is specified using thecolor_palette` vector for better distinction between years.\n\n\n\n\n\n4.6 Combined Interactive Plot\n\n\nCode\ncombined_plot &lt;- subplot(\n  interactive_plot1,\n  subplot(\n    interactive_plot2,\n    interactive_plot3,\n    nrows = 2,\n    shareX = TRUE\n  ),\n  nrows = 1,\n  titleX = TRUE  # Set this to TRUE to show titles along the X-axis\n)\n\n# Display the combined plot with a common title\ncombined_plot &lt;- combined_plot %&gt;% layout(title = \"Interactive Rainfall Data Visualization\")\n\n# Show the combined plot\ncombined_plot\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe combined plot provides an interactive overview of rainfall data, allowing users to explore the distribution, patterns, and averages of daily rainfall across different years. The use of subplots facilitates a comprehensive visual exploration of the data from multiple perspectives."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#conclution",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#conclution",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "5 Conclution",
    "text": "5 Conclution\nIn the Changi region, the median daily rainfall for the month of August remained consistently at 0 in 1983, 1993, 2003, 2013, and 2023. This pattern is attributed to August being the dry season in Singapore. Notably, the year 1983 exhibited the highest average rainfall among the five years. However, the distribution of daily rainfall values for this year 1983 is relatively concentrated, with the exception of an outlier on August 22nd, where the total rainfall exceeded 180mm. In contrast, both 2013 and 2023 did not experience any outliers with daily rainfall surpassing 50mm. The year 1993, on the other hand, recorded the lowest average rainfall, accompanied by the smallest interquartile range."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "4 Plotting Cycle Plot",
    "text": "4 Plotting Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n4.1 Step 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\n4.2 Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\n4.3 Step 3: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\n4.4 Step 4: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n4.5 Srep 6: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\ngg&lt;- ggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"#3459e6\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"lightgreen\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")+\n  theme(axis.text.x = element_blank())\ninteractive_plot &lt;- ggplotly(gg)\n\n# Show the interactive plot\ninteractive_plot\n\n\n\n\n\n\n\n\n\n\n\nWhat I did\n\n\n\n\nColor Adjustments:\n\nI changed the line color in geom_line from “black” to “#3459e6” (a shade of blue).\nI modified the hline color in geom_hline from “red” to “lightgreen”.\n\nAxis Text Removal:\n\nI added theme(axis.text.x = element_blank()) to remove x-axis text labels.\n\nInteractive Version:\n\nI converted the static ggplot (gg) to an interactive plot using ggplotly() and stored it in interactive_plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "5 Plotting Slopegraph",
    "text": "5 Plotting Slopegraph\nIn this section you will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment. Then, refer to Using newggslopegraph to learn more about the function. Lastly, read more about newggslopegraph() and its arguments by referring to this link.\n\n5.1 Step 1: Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\n5.2 Step 2: Plotting the slopegraph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\n\n\n\n\n\n\nWhat I can learn\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html",
    "title": "Hands-on Exercise 7A: Choropleth Mapping with R",
    "section": "",
    "text": "In this hands-on exercise, I will be sharing how to plot functional and truthful choropleth maps using an R package tmap."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#overview",
    "title": "Hands-on Exercise 7A: Choropleth Mapping with R",
    "section": "",
    "text": "In this hands-on exercise, I will be sharing how to plot functional and truthful choropleth maps using an R package tmap."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#getting-started",
    "title": "Hands-on Exercise 7A: Choropleth Mapping with R",
    "section": "2 2 Getting Started",
    "text": "2 2 Getting Started\n\n2.1 2.1 Packages\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\n\nCode\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n2.2 2.2 Data Acquisition\nThe datasets we are using are downloaded from the following sources:\n\nMaster Plan 2014 Subzone Boundary (Web): data.gov.sg.\nSingapore Residents by Planning Area/Subzone, Age, Group, Sex and Type of Dwelling, June 2011 - 2020: Department of Statistics, Singapore."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#importing-data-into-r",
    "title": "Hands-on Exercise 7A: Choropleth Mapping with R",
    "section": "3 3 Importing Data into R",
    "text": "3 3 Importing Data into R\n\n3.1 3.1 Importing Geospatial Data into R\nThe code chunk below uses st_read() function of sf package to import the planning subzones, which is a polygon feature data frame.\n\n\nCode\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\cjh202311\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nCode\nmpsz\n\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nLet’s take a look at the contents of mpsz using the following code chunk:\n\n\nCode\nmpsz\n\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n3.2 3.2 Importing Attribute Data into R\nWe will use read_csv()\n\n\nCode\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\",show_col_types = FALSE)\n\n\nLet’s take a look at the data imported in:\n\n\nCode\nlist(popdata)\n\n\n[[1]]\n# A tibble: 984,656 × 7\n   PA         SZ                     AG     Sex     TOD                Pop  Time\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;            &lt;dbl&gt; &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 1- and 2-Ro…     0  2011\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 3-Room Flats    10  2011\n 3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 4-Room Flats    30  2011\n 4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 5-Room and …    50  2011\n 5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HUDC Flats (exc…     0  2011\n 6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Landed Properti…     0  2011\n 7 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Condominiums an…    40  2011\n 8 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Others               0  2011\n 9 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 1- and 2-Ro…     0  2011\n10 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 3-Room Flats    10  2011\n# ℹ 984,646 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#data-preparation",
    "title": "Hands-on Exercise 7A: Choropleth Mapping with R",
    "section": "4 4 Data Preparation",
    "text": "4 4 Data Preparation\nBefore a thematic map can be prepared, we need to prepare a data table just for year 2020 values. The data table should include the following variables:\n\nPA\nSZ\nYOUNG: age group 0 to 4 until age group 20 to 24\nECONOMY ACTIVE: age group 20 to 29 up till age group 60 to 64\nAGED: age group 65 and above\nTOTAL: all age group\nDEPENDENCY: the ratio between YOUNG and AGED against ECONOMY ACTIVE group\n\n\n4.1 4.1 Data Wrangling\nWe will be using the following functions from tidyverse package:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\n\nCode\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(POP = sum(Pop), .groups = \"drop\")%&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\n4.2 4.2 Joining the attribute data and geospatial data\nWe will convert the values in PA and SZ files to uppercase because the values of PA and SZ fields are made up of upper and lower case while the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\nCode\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")\n\n\nThen, we will use left_join() of dplyr to join the geographical data and trribute table using planning subzone name (SUBZON_N and SZ) as the common identifiers.\n\n\nCode\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\nCode\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 7A: Choropleth Mapping with R",
    "section": "5 5 Choropleth Mapping Geospatial Data Using tmap",
    "text": "5 5 Choropleth Mapping Geospatial Data Using tmap\nTo prepare thematic map using tmap, we can:\n\nPlot a thematic map quickly using qtm().\nPlot highly customisable thematic map by using tmap elements.\n\n\n5.1 5.1 Plotting a choropleth map quickly by using qtm()\nThe code chunk below draws a cartographic standard choropleth map.\n\n\nCode\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n5.2 5.2 Creating a choropleth map by using tmap’s elements\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n5.2.1 5.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons.\n\n\nCode\n tm_shape(mpsz_pop2020) + \n   tm_polygons()\n\n\n\n\n\n\n\n5.2.2 5.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we can assign the target variable (e.g. Dependency) to tm_polygons().\n\n\nCode\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n5.2.3 5.2.3 Drawing a choropleth map using tm_fill() and tm_border()\ntm_polygons is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\") + \n  tm_borders(lw = 0.1, alpha = 1)\n\n\n\n\n\n\n\n5.2.4 5.2.4 Putting it all together\nTo draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n5.3 5.3 Data Classification Methods of tmap\nMost choropleth maps use some methods of data classification in order to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n5.3.1 5.3.1 Plotting choropleth map with custome break\nThe code chunk below shows a jenks data classification that used 5 classes:\n\n\nCode\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          n = 5, \n          style = \"jenks\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\nThe code chunk below uses the equal data classification method.\n\n\nCode\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", \n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n5.3.2 5.3.2 Plotting choropleth map with custom break\nWe can also compute our own category breaks.\nFirst, we will compute and display the descriptive statistics of DEPENDENCY field.\n\n\nCode\nsummary(mpsz_pop2020$DEPENDENCY)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nUsing the above results, we set the break points at 0.60, 0.70, 0.80, 0.90, and 0 will be the minimum while 1 will be the maximum.\nWe plot the choropleth map with our customised breaks using the following code chunk:\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n5.4 5.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n5.4.1 5.4.1 Using ColourBrewer palette\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nTo revese the colour shading, add a “-” prefix under “palette”.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n\n  tm_fill(\"DEPENDENCY\",\n\n          style = \"quantile\",\n\n          palette = \"-Greens\") +\n\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n5.5 5.5 Map Layouts\n\n5.5.1 5.5.1 Map Legend\nIn tmap, several legend options are available to change the placement, format and appearance of the legend.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n5.5.2 5.5.2 Map Style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n5.5.3 5.5.3 Cartographic Furniture\ntmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\n\nCode\ntm_shape(mpsz_pop2020) + \n  tm_fill(\"DEPENDENCY\", style = \"quantile\",\n          palette = \"Blues\", \n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n (Based on Quantile)\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) + \n  tm_borders(alpha = 0.5) + \n  tm_compass(type = \"8star\", size = 2) + \n  tm_scale_bar(width = 0.15) + \n  tm_grid(lwd = 0.1, alpha = 0.2) + \n  tm_credits(\"Source: Planning Subzone boundary from Urban Redevelopment Authority (URA) \\n and Population data from Department of Statistics (DOS)\",\n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nTo return to the previous map style, use the following code chunk:\n\n\nCode\ntmap_style(\"white\")\n\n\n\n\n\n5.6 5.6 Drawing Small Multiple Choropleth Maps\nIn tmap, small multiple maps (also known as facet maps) can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n5.6.1 5.6.1 By assigning multiple values to at least one of the aesthetic arguments\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\nCode\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n5.6.2 5.6.2 By defining a group-by variable in tm_facets()\n\n\nCode\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n5.6.3 5.6.3 By creating multiple stand-alone maps with tmap_arrange()\n\n\nCode\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n5.7 5.7 Mapping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\n\nCode\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07A.html#reference",
    "title": "Hands-on Exercise 7A: Choropleth Mapping with R",
    "section": "6 Reference",
    "text": "6 Reference\n\n6.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n6.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n6.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "",
    "text": "Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools' outlets using an R package called tmap.\n\n\nBy the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#learning-outcome",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "",
    "text": "By the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#the-data",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "3.1 The data",
    "text": "3.1 The data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#data-import-and-preparation",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "3.2 Data Import and Preparation",
    "text": "3.2 Data Import and Preparation\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\n\nCode\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\n\nCode\nlist(sgpools) \n\n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "3.3 Creating a sf data frame from an aspatial data frame",
    "text": "3.3 Creating a sf data frame from an aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\n\nCode\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\n\nThings to learn from the arguments above:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by refering to epsg.io.\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nI can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\n\nCode\nlist(sgpools_sf)\n\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nThe output shows that sgppols_sf is in point feature class. It's epsg ID is 3414. The bbox provides information of the extend of the geospatial data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#t-all-started-with-an-interactive-point-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#t-all-started-with-an-interactive-point-symbol-map",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "4.1 t all started with an interactive point symbol map",
    "text": "4.1 t all started with an interactive point symbol map\nThe code chunks below are used to create an interactive point symbol map.\n\n\nCode\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"#3459e6\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#lets-make-it-proportional",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#lets-make-it-proportional",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "4.2 Lets make it proportional",
    "text": "4.2 Lets make it proportional\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\n\nCode\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"#3459e6\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#lets-give-it-a-different-colour",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#lets-give-it-a-different-colour",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "4.3 Lets give it a different colour",
    "text": "4.3 Lets give it a different colour\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\n\nCode\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#i-have-a-twin-brothers",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#i-have-a-twin-brothers",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "4.4 I have a twin brothers :)",
    "text": "4.4 I have a twin brothers :)\nAn impressive and little-know feature of tmap's view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\n\nCode\ntm_shape(sgpools_sf) +   tm_bubbles(col = \"OUTLET TYPE\",            size = \"Gp1Gp2 Winnings\",           border.col = \"black\",           border.lwd = 1) +   tm_facets(by= \"OUTLET TYPE\",             nrow = 1,             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap's Viewer back to plot mode by using the code chunk below.\n\n\nCode\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#all-about-tmap-package",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#all-about-tmap-package",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "5.1 27.1 All about tmap package",
    "text": "5.1 27.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#geospatial-data-wrangling-1",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#geospatial-data-wrangling-1",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "5.2 27.2 Geospatial data wrangling",
    "text": "5.2 27.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07B.html#data-wrangling",
    "title": "Hands-on Exercise 7B: Visualising Geospatial Point Data",
    "section": "5.3 27.3 Data wrangling",
    "text": "5.3 27.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with 'spread()' and 'gather()' Functions"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex6.html",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex6.html",
    "title": "Horizon Plot",
    "section": "",
    "text": "pacman::p_load(ggHoriPlot,ggthemes, tidyverse )\n\n\naverp &lt;- read_csv(\"data/AVERP.csv\") %&gt;%\n  mutate(`Date` = dmy(`Date`))\n\n\naverp %&gt;% \n  filter(Date &gt;= \"2018-01-01\") %&gt;%\n  ggplot() +\n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6)+\n  facet_grid(`Consumer Items`~.) +\n    theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')"
  }
]