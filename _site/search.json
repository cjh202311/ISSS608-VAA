[
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "",
    "text": "According to an office report as shown in the infographic below,\n\nDaily mean temperature are projected to increase by 1.4 to 4.6, and\nThe contrast between the wet months (November to January) and dry month (February and June to September) is likely to be more pronounced."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#overview",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#overview",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "",
    "text": "According to an office report as shown in the infographic below,\n\nDaily mean temperature are projected to increase by 1.4 to 4.6, and\nThe contrast between the wet months (November to January) and dry month (February and June to September) is likely to be more pronounced."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#objective",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#objective",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "2 Objective",
    "text": "2 Objective\n\nSelect a weather station and download historical daily temperature or rainfall data from Meteorological Service Singapore website,\nSelect either daily temperature or rainfall records of a month of the year 1983, 1993, 2003, 2013 and 2023 and create an analytics-driven data visualisation,\nApply appropriate interactive techniques to enhance the user experience in data discovery and/or visual story-telling."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-preparation",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "3 Data Preparation",
    "text": "3 Data Preparation\n\n3.1 Loading R packages\nIn this exercise, four R packages will be used. They are:\n\nreadr: Used for reading and importing CSV files. Functions like read_csv are part of the readr package.\ndplyr: Used for data manipulation and analysis. Functions like bind_rows, select, group_by, and summarize are part of the dplyr package.\nggplot2: Used for creating static and dynamic (with ggplotly) plots and visualizations.\nplotly: Used for creating interactive plots and visualizations. Functions like plot_ly and ggplotly are part of the plotly package.\n\n\n\nCode\npacman::p_load(\"readr\", \"dplyr\", \"ggplot2\", \"plotly\")\n\n\n\n\n3.2 Importing data\nIn this exercise, we will be working with the daily rainfall records for the month of August in the years 1983, 1993, 2003, 2013, and 2023 in the area of Changi. We will import the data for these five years using the \"read.csv\" function.\n\n\nCode\nchangi198308 &lt;- read.csv(\"data/DAILYDATA_S24_198308.csv\",fileEncoding = \"ISO-8859-1\")\nchangi199308 &lt;- read.csv(\"data/DAILYDATA_S24_199308.csv\", fileEncoding = \"ISO-8859-1\")\nchangi200308 &lt;- read.csv(\"data/DAILYDATA_S24_200308.csv\", fileEncoding = \"ISO-8859-1\")\nchangi201308 &lt;- read.csv(\"data/DAILYDATA_S24_201308.csv\", fileEncoding = \"ISO-8859-1\")\nchangi202308 &lt;- read.csv(\"data/DAILYDATA_S24_202308.csv\")\n\n\n\n\nCode\ncolnames(changi198308)\n\n\n [1] \"Station\"                       \"Year\"                         \n [3] \"Month\"                         \"Day\"                          \n [5] \"Daily.Rainfall.Total..mm.\"     \"Highest.30.Min.Rainfall..mm.\" \n [7] \"Highest.60.Min.Rainfall..mm.\"  \"Highest.120.Min.Rainfall..mm.\"\n [9] \"Mean.Temperature...C.\"         \"Maximum.Temperature...C.\"     \n[11] \"Minimum.Temperature...C.\"      \"Mean.Wind.Speed..km.h.\"       \n[13] \"Max.Wind.Speed..km.h.\"        \n\n\nCode\ncolnames(changi199308)\n\n\n [1] \"Station\"                       \"Year\"                         \n [3] \"Month\"                         \"Day\"                          \n [5] \"Daily.Rainfall.Total..mm.\"     \"Highest.30.Min.Rainfall..mm.\" \n [7] \"Highest.60.Min.Rainfall..mm.\"  \"Highest.120.Min.Rainfall..mm.\"\n [9] \"Mean.Temperature...C.\"         \"Maximum.Temperature...C.\"     \n[11] \"Minimum.Temperature...C.\"      \"Mean.Wind.Speed..km.h.\"       \n[13] \"Max.Wind.Speed..km.h.\"        \n\n\nCode\ncolnames(changi200308)\n\n\n [1] \"Station\"                       \"Year\"                         \n [3] \"Month\"                         \"Day\"                          \n [5] \"Daily.Rainfall.Total..mm.\"     \"Highest.30.Min.Rainfall..mm.\" \n [7] \"Highest.60.Min.Rainfall..mm.\"  \"Highest.120.Min.Rainfall..mm.\"\n [9] \"Mean.Temperature...C.\"         \"Maximum.Temperature...C.\"     \n[11] \"Minimum.Temperature...C.\"      \"Mean.Wind.Speed..km.h.\"       \n[13] \"Max.Wind.Speed..km.h.\"        \n\n\nCode\ncolnames(changi201308)\n\n\n [1] \"Station\"                       \"Year\"                         \n [3] \"Month\"                         \"Day\"                          \n [5] \"Daily.Rainfall.Total..mm.\"     \"Highest.30.Min.Rainfall..mm.\" \n [7] \"Highest.60.Min.Rainfall..mm.\"  \"Highest.120.Min.Rainfall..mm.\"\n [9] \"Mean.Temperature...C.\"         \"Maximum.Temperature...C.\"     \n[11] \"Minimum.Temperature...C.\"      \"Mean.Wind.Speed..km.h.\"       \n[13] \"Max.Wind.Speed..km.h.\"        \n\n\nCode\ncolnames(changi202308)\n\n\n [1] \"Station\"                       \"Year\"                         \n [3] \"Month\"                         \"Day\"                          \n [5] \"Daily.Rainfall.Total..mm.\"     \"Highest.30.min.Rainfall..mm.\" \n [7] \"Highest.60.min.Rainfall..mm.\"  \"Highest.120.min.Rainfall..mm.\"\n [9] \"Mean.Temperature...C.\"         \"Maximum.Temperature...C.\"     \n[11] \"Minimum.Temperature...C.\"      \"Mean.Wind.Speed..km.h.\"       \n[13] \"Max.Wind.Speed..km.h.\"        \n\n\nBy examining the variable names, we observe that the variable names are consistent across all tables. Consequently, we can merge the data from all five tables into a single unified dataset by using bind_rows.\n\n\nCode\nchangi &lt;- bind_rows(changi198308, changi199308, changi200308, changi201308, changi202308)\n\nsummary(changi)\n\n\n   Station               Year          Month        Day    \n Length:155         Min.   :1983   Min.   :8   Min.   : 1  \n Class :character   1st Qu.:1993   1st Qu.:8   1st Qu.: 8  \n Mode  :character   Median :2003   Median :8   Median :16  \n                    Mean   :2003   Mean   :8   Mean   :16  \n                    3rd Qu.:2013   3rd Qu.:8   3rd Qu.:24  \n                    Max.   :2023   Max.   :8   Max.   :31  \n                                                           \n Daily.Rainfall.Total..mm. Highest.30.Min.Rainfall..mm.\n Min.   :  0.000           Length:155                  \n 1st Qu.:  0.000           Class :character            \n Median :  0.000           Mode  :character            \n Mean   :  5.434                                       \n 3rd Qu.:  3.750                                       \n Max.   :181.800                                       \n                                                       \n Highest.60.Min.Rainfall..mm. Highest.120.Min.Rainfall..mm.\n Length:155                   Length:155                   \n Class :character             Class :character             \n Mode  :character             Mode  :character             \n                                                           \n                                                           \n                                                           \n                                                           \n Mean.Temperature...C. Maximum.Temperature...C. Minimum.Temperature...C.\n Min.   :25.50         Min.   :27.80            Min.   :21.60           \n 1st Qu.:27.70         1st Qu.:31.10            1st Qu.:24.65           \n Median :28.50         Median :31.90            Median :25.80           \n Mean   :28.29         Mean   :31.66            Mean   :25.56           \n 3rd Qu.:28.95         3rd Qu.:32.40            3rd Qu.:26.70           \n Max.   :30.10         Max.   :33.90            Max.   :28.20           \n                                                                        \n Mean.Wind.Speed..km.h. Max.Wind.Speed..km.h. Highest.30.min.Rainfall..mm.\n Min.   : 2.90          Min.   :23.0          Min.   : 0.000              \n 1st Qu.: 7.70          1st Qu.:31.6          1st Qu.: 0.000              \n Median :10.50          Median :36.0          Median : 0.000              \n Mean   :10.34          Mean   :37.0          Mean   : 2.219              \n 3rd Qu.:12.70          3rd Qu.:40.7          3rd Qu.: 2.400              \n Max.   :18.10          Max.   :75.6          Max.   :16.400              \n                                              NA's   :124                 \n Highest.60.min.Rainfall..mm. Highest.120.min.Rainfall..mm.\n Min.   : 0.000               Min.   : 0.000               \n 1st Qu.: 0.000               1st Qu.: 0.000               \n Median : 0.000               Median : 0.000               \n Mean   : 2.458               Mean   : 2.813               \n 3rd Qu.: 3.200               3rd Qu.: 3.700               \n Max.   :16.400               Max.   :16.600               \n NA's   :124                  NA's   :124                  \n\n\nIt is evident that numerous variables contain NA values. We will exclude the variables with NA values, and as this exercise focuses solely on the variation in rainfall, we will remove temperature-related variables. The remaining variables will be renamed appropriately.\n\n\nCode\nnames(changi) &lt;- c(\"Station\", \"Year\", \"Month\", \"Day\", \n               \"Daily Rainfall Total (mm)\")\n\nchangi &lt;- changi[ c(\"Year\", \"Month\", \"Day\", \n             \"Daily Rainfall Total (mm)\")]\n\n\nWe will merge the columns for year, month, and day into a new column with a date format. Retain the original year, month, and day columns for future filtering purposes.\n\n\nCode\nchangi$Date &lt;- as.Date(paste(changi$Year, changi$Month, changi$Day, sep = \"-\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-interaction-visualisation",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-interaction-visualisation",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "4 Data Interaction Visualisation",
    "text": "4 Data Interaction Visualisation\n\n4.1 Animated Interactive Bar Chart of Daily Rainfall by year\nWe create an interactive bar chart using the plot_ly function, with daily rainfall totals plotted against the day of the month across the years of 1983, 1993, 2003, 2013, and 2023.\n\n\nCode\np2 &lt;- changi %&gt;%\n  plot_ly(x = ~Day, \n          y = ~`Daily Rainfall Total (mm)`, \n          frame = ~Year, \n          type = 'bar',\n          hoverinfo = ~ 'y',\n          marker = list(color = \"#3459e6\")) %&gt;%\n  layout(showlegend = FALSE)\n\np2\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe chart provides a dynamic and interactive way to explore how daily rainfall varies across different days of the month, with a focus on comparing this variation across multiple years. The animation allows for a temporal understanding of rainfall patterns.\n\nX-axis (Day): The days of the month are plotted along the x-axis, indicating the progression of time within each month.\nY-axis (Daily Rainfall Total (mm)): The y-axis represents the daily rainfall totals in millimeters. Each bar’s height corresponds to the amount of rainfall recorded on a specific day.\nColor and Animation (Year): The bars are color-coded, and the chart is animated based on the “Year” variable. Each frame of the animation corresponds to a different year, allowing you to observe how daily rainfall patterns change across multiple years.\nHover Information (hoverinfo = ~ 'y'): When you hover over a specific bar, the information displayed includes the y-value, which is the corresponding daily rainfall total for that day.\n\n\n\n\n\n4.2 Interactive Daily Rainfall Heatmap\nWe generate a heatmap using the plot_ly function from the plotly package. This heatmap visualizes the daily rainfall records for the Changi area in the month of August across the years of 1983, 1993, 2003, 2013, and 2023.\n\n\nCode\np3 &lt;- plot_ly(changi, x = ~Year, y = ~Day, z = ~`Daily Rainfall Total (mm)`, type = \"heatmap\", colorscale = \"Viridis\") %&gt;%\n  layout(title = \"Rainfall Heatmap in August (1983-2023)\",\n         xaxis = list(title = \"Year\"),\n         yaxis = list(title = \"Day\"))\n\n\np3\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe heatmap offers a comprehensive view of how daily rainfall patterns vary across the month of August for each year from 1983 to 2023. It allows for easy identification of trends, such as specific days or years with higher or lower rainfall.\n\nX-axis (Year): The x-axis represents the years of 1983, 1993, 2003, 2013, and 2023. Each column in the heatmap corresponds to a specific year.\nY-axis (Day): The y-axis represents the days of the month (August). Each row in the heatmap corresponds to a specific day.\nZ-axis (Daily Rainfall Total (mm)): The color intensity at each intersection of the year and day represents the daily rainfall total in millimeters. Darker colors indicate higher rainfall, while lighter colors indicate lower rainfall.\n\n\n\n\n\n4.3 Interactive Boxplot of Daily Rainfall by year\nWe generate a an interactive boxplot using the ggplot2 and plotly packages. The boxplot visualizes the distribution of daily rainfall totals in August for the years of 1983, 1993, 2003, 2013, and 2023 in the Changi area.\n\n\nCode\nchangi$Year &lt;- as.factor(changi$Year)\n\n\ncolor_palette &lt;- c(\"#3459e6\", \"#e63491\", \"skyblue\", \"#fccb41\", \"#9c52d9\")\n\n# Create the ggplot with custom colors\np1 &lt;- ggplot(changi, aes(x = Year, y = `Daily Rainfall Total (mm)`, fill = Year)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Daily Rainfall Total in August (1983-2023)\",\n       x = \"Year\",\n       y = \"Daily Rainfall Total (mm)\"\n  ) +\n  scale_fill_manual(values = setNames(color_palette, levels(changi$Year))) +\n  theme_minimal()\n\ninteractive_plot1 &lt;- ggplotly(p1)\n\n# Display the interactive plot\ninteractive_plot1\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe interactive boxplot allows users to compare the distribution of daily rainfall totals across different years in August. It provides insights into the variability and central tendencies of rainfall patterns over the specified time frame.\n\nX-axis (Year): The x-axis represents the years from 1983, 1993, 2003, 2013, and 2023. Each boxplot is associated with a specific year, allowing for the comparison of rainfall distributions across years.\nY-axis (Daily Rainfall Total (mm)): The y-axis represents the daily rainfall totals in millimeters. The boxplots display the distribution of these values, including the median, quartiles, and potential outliers.\nBoxplots (geom_boxplot()): Each boxplot provides a summary of the distribution of daily rainfall for a specific year. The box itself represents the interquartile range (IQR), with the median indicated by a line inside the box. Whiskers extend to the minimum and maximum values within a certain range, and potential outliers may be displayed as individual points.\nInteractive Plot (ggplotly(p1)): The ggplotly function from the plotly package is used to convert the static ggplot object (p1) into an interactive plot, allowing for exploration and interaction with the data.\nCustom Colors (scale_color_manual): The color palette is specified using thecolor_palette` vector for better distinction between years.\n\n\n\n\n\n4.4 Interactive Line Plot of Daily Rainfall by year\nWe generate an interactive line plot using the ggplot2 and plotly packages to visualize the daily rainfall totals in the Changi area over days for the years 1983, 1993, 2003, 2013, and 2023.\n\n\nCode\ncolor_palette &lt;- c(\"#3459e6\", \"#e63491\", \"skyblue\", \"#fccb41\", \"#9c52d9\")\np4 &lt;- ggplot() + \n  geom_line(data = changi,\n            aes(x = Day, \n                y = `Daily Rainfall Total (mm)`, \n                group = Year, \n                color = Year),  \n            size = 1) +\n  scale_color_manual(values = setNames(color_palette, levels(changi$Year)))+\n  facet_grid(~Year) +\n  labs(axis.text.x = element_blank(),\n       title = \"Changi Daily Rainfall Total Over Days by Year\") +\n  xlab(\"Day\") +\n  ylab(\"Daily Rainfall Total (mm)\") +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    panel.grid.major = element_line(color = \"lightgray\"),\n    panel.grid.minor = element_blank(),\n    axis.line = element_line(color = \"darkgrey\"),\n    legend.position = \"none\",\n    plot.title = element_text(hjust = 0.5))\n\ninteractive_plot2 &lt;- ggplotly(p4)\n\ninteractive_plot2\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe interactive line plot allows user to visually explore the daily variation in rainfall totals for each day of August across different years in the Changi area. It facilitates the comparison of rainfall trends over time, offering insights into potential patterns or anomalies.\n\nX-axis (Day): The x-axis represents the days of the month (August).\nY-axis (Daily Rainfall Total (mm)): The y-axis represents the daily rainfall totals in millimeters.\nLines (geom_line()): Multiple lines are drawn, each corresponding to a specific year. The lines connect the daily rainfall totals for each day, providing a visual representation of the trend in rainfall over the month.\nColor (color = Year): Each line is colored based on the corresponding year, allowing for easy differentiation of data series.\nFaceting (`facet_grid(~Year)’): The plot is faceted by year, meaning that each year has its own subplot. This arrangement enables a direct comparison of rainfall patterns between different years.\nTheme Configuration (theme): Various theme elements are adjusted for aesthetics and clarity, including background color, grid lines, axis lines, and title alignment.\nInteractive Plot (ggplotly(p4)): The ggplotly function from the plotly package is used to convert the static ggplot object (p4) into an interactive plot, allowing for exploration and interaction with the data.\nCustom Colors (scale_color_manual): The color palette is specified using thecolor_palette` vector for better distinction between years.\n\n\n\n\n\n4.5 Interactive Bar chart of AVG Daily Rainfall by year\nWe calculate the annual average precipitation in the Changi area and then generate an interactive bar chart using the ggplot2 and plotly packages.\n\n\nCode\naverage_precipitation &lt;- changi %&gt;%\n  group_by(Year) %&gt;%\n  summarize(AvgPrecipitation = mean(`Daily Rainfall Total (mm)`, na.rm = TRUE))\n\np5 &lt;- ggplot(average_precipitation, aes(x = Year, y = AvgPrecipitation , fill = Year)) +\n  geom_col() +\n  labs(title = \"Average Daily Rainfall Total by Year\",\n       x = \"Year\",\n       y = \"Average Daily Rainfall Total (mm)\") +\n  scale_fill_manual(values = setNames(color_palette, levels(changi$Year))) +\n  theme_minimal()\n\n# Convert ggplot to plotly\ninteractive_plot3 &lt;- ggplotly(p5)\n\n# Show the interactive plot\ninteractive_plot3\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThis interactive bar chart illustrates the annual variations in average rainfall in the Changi area. Users can interactively explore and compare the average daily rainfall totals across different years.\n\nCompute Averages: Using the group_by and summarize functions, the changi data is grouped by year, and the average daily rainfall total for each year is calculated, creating a new data frame named average_precipitation.\nX-axis (Year): The x-axis represents different years.\nY-axis (AvgPrecipitation): The y-axis represents the annual average rainfall in millimeters.\nBar Chart (geom_col()): Each year is represented by a bar, where the height of the bar corresponds to the average rainfall for that year.\nColor (fill = Year): Each bar is colored based on the corresponding year, facilitating the differentiation of data for different years.\nInteractive Plot (ggplotly(p5)): The ggplotly function is used to convert the static ggplot object (p5) into an interactive plot, allowing users to explore and interact with the data.\nCustom Colors (scale_color_manual): The color palette is specified using thecolor_palette` vector for better distinction between years.\n\n\n\n\n\n4.6 Combined Interactive Plot\n\n\nCode\ncombined_plot &lt;- subplot(\n  interactive_plot1,\n  subplot(\n    interactive_plot2,\n    interactive_plot3,\n    nrows = 2,\n    shareX = TRUE\n  ),\n  nrows = 1,\n  titleX = TRUE  # Set this to TRUE to show titles along the X-axis\n)\n\n# Display the combined plot with a common title\ncombined_plot &lt;- combined_plot %&gt;% layout(title = \"Interactive Rainfall Data Visualization\")\n\n# Show the combined plot\ncombined_plot\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe combined plot provides an interactive overview of rainfall data, allowing users to explore the distribution, patterns, and averages of daily rainfall across different years. The use of subplots facilitates a comprehensive visual exploration of the data from multiple perspectives."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#conclution",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#conclution",
    "title": "Take Home Exercise 3: Be Weatherwise or Otherwise",
    "section": "5 Conclution",
    "text": "5 Conclution\nIn the Changi region, the median daily rainfall for the month of August remained consistently at 0 in 1983, 1993, 2003, 2013, and 2023. This pattern is attributed to August being the dry season in Singapore. Notably, the year 1983 exhibited the highest average rainfall among the five years. However, the distribution of daily rainfall values for this year 1983 is relatively concentrated, with the exception of an outlier on August 22nd, where the total rainfall exceeded 180mm. In contrast, both 2013 and 2023 did not experience any outliers with daily rainfall surpassing 50mm. The year 1993, on the other hand, recorded the lowest average rainfall, accompanied by the smallest interquartile range."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Applications",
    "section": "",
    "text": "In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "index.html#hands-on-exercise",
    "href": "index.html#hands-on-exercise",
    "title": "Visual Analytics and Applications",
    "section": "Hands On Exercise",
    "text": "Hands On Exercise\n\n\n\n\n\n\n\n\n\nHands-on Exercise 10: Information Dashboard Design: R methods\n\n\n\nCai Jingheng\n\n\nMar 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods\n\n\n\nCai Jingheng\n\n\nJan 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 2: Beyond ggplot2 Fundamentals\n\n\n\nCai Jingheng\n\n\nJan 14, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 3A: Programming Interactive Data Visualisation with R\n\n\n\nCai Jingheng\n\n\nJan 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 3B: Programming Animated Statistical Graphics with R\n\n\n\nCai Jingheng\n\n\nJan 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 4A: Visualising Distribution\n\n\n\nCai Jingheng\n\n\nJan 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 4B: Visual Statistical Analysis\n\n\n\nCai Jingheng\n\n\nJan 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 4C: Visualising Uncertainty\n\n\n\nCai Jingheng\n\n\nJan 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 4D: Funnel Plots for Fair Comparisons\n\n\n\nCai Jingheng\n\n\nJan 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5A: Creating Ternary Plot with R\n\n\n\nCai Jingheng\n\n\nFeb 3, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5B: Visual Correlation Analysis\n\n\n\nCai Jingheng\n\n\nFeb 3, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5C: Heatmap for Visualising and Analysing Multivariate Data\n\n\n\nCai Jingheng\n\n\nFeb 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5D: Visual Multivariate Analysis with Parallel Coordinates Plot\n\n\n\nCai Jingheng\n\n\nFeb 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5E: Treemap Visualisation with R\n\n\n\nCai Jingheng\n\n\nFeb 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 6: Visualising and Analysing Time-oriented Data\n\n\n\nCai Jingheng\n\n\nFeb 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 8A: Choropleth Mapping with R\n\n\n\nCai Jingheng\n\n\nFeb 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 8B: Visualising Geospatial Point Data\n\n\n\nCai Jingheng\n\n\nFeb 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 8C: Analytical Mapping\n\n\n\nCai Jingheng\n\n\nFeb 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 9: Modelling, Visualising and Analysing Network Data with R\n\n\n\nCai Jingheng\n\n\nMar 7, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#in-class-exercise",
    "href": "index.html#in-class-exercise",
    "title": "Visual Analytics and Applications",
    "section": "In Class Exercise",
    "text": "In Class Exercise\n\n\n\n\n\n\n\n\n\nHorizon Plot\n\n\n\nCai Jingheng\n\n\nFeb 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIn Class Exerice 7: IsoMap\n\n\n\nCai Jingheng\n\n\nMar 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Exercise 1: Now you see it!\n\n\n\nCai Jingheng\n\n\nJan 13, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Exercise 9: Modelling, Visualising and Analysing Network Data with R\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#take-home-exercise",
    "href": "index.html#take-home-exercise",
    "title": "Visual Analytics and Applications",
    "section": "Take Home Exercise",
    "text": "Take Home Exercise\n\n\n\n\n\n\n\n\n\nTake Home Exercise 3: Be Weatherwise or Otherwise\n\n\n\nCai Jingheng\n\n\nFeb 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTake Home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application\n\n\n\nCai Jingheng\n\n\nMar 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTake-home Exercise 1: Creating data visualisation beyond default\n\n\n\nCai Jingheng\n\n\nJan 14, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTake-home Exercise 2: DataVis Makeover\n\n\n\nCai Jingheng\n\n\nJan 25, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex07/data/geospatial/MPSZ-2019.html",
    "title": "Visual Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "title": "Take Home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application and complete the following tasks:\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test the specific R codes to ensure they can be run and return the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications, and\nTo select the appropriate Shiny UI components for exposing the parameters determined above."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#objectives",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#objectives",
    "title": "Take Home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the modules of our proposed Shiny application and complete the following tasks:\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test the specific R codes to ensure they can be run and return the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications, and\nTo select the appropriate Shiny UI components for exposing the parameters determined above."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#data-preparation",
    "title": "Take Home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "2 Data Preparation",
    "text": "2 Data Preparation\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\nLoad FilesData WranglingJoin TablesSave DatasetLoad Dataset\n\n\n\nppi &lt;- read_csv('data/PPI_private_housing.csv') %&gt;% \n  setNames(c('Date', 'PR_All', 'PR_Landed', 'PR_NL_ALL', 'PR_NL_CCR', 'PR_NL_RCR', 'PR_NL_OCR')) %&gt;%\n  mutate(Date = as.Date(Date, format = '%d/%m/%Y')) %&gt;% \n  mutate(Month = month(Date)) %&gt;% \n  mutate(Date = year(Date)) %&gt;% \n  rename(Year = Date) %&gt;% \n  mutate(Year = as.factor(Year))\n\nmaterial_price &lt;- read_csv('data/Construction Materials prices.csv') %&gt;% \n  setNames(c('Date', 'Cement', 'SteelBar', 'Granite', 'ConcretingSand', 'ReadyMixConcrete')) %&gt;% \n  mutate(Date = as.Date(Date, format = '%d/%m/%Y')) %&gt;% \n  mutate(Year = year(Date)) %&gt;% \n  mutate(Month = month(Date)) %&gt;% \n  mutate(Year = as.factor(Year)) %&gt;% \n  mutate(Month = as.factor(Month))\n\nsti &lt;- read_csv('data/Index FTSE Strait Times.csv') %&gt;% \n  setNames(c('Date', 'Index')) %&gt;% \n  mutate(Date = as.Date(Date, format = '%d/%m/%Y')) %&gt;% \n  mutate(Year = year(Date)) %&gt;% \n  mutate(Month = month(Date)) %&gt;% \n  mutate(Day = day(Date)) %&gt;% \n  mutate(Year = as.factor(Year)) %&gt;% \n  mutate(Month = as.factor(Month))\n\ntbillbond &lt;- read_csv('data/Treasury_Bill_Bond_ rates.csv') %&gt;% \n  setNames(c('Date', 'Bill1Yr', 'Bond2Yr', 'Bond5Yr', 'Bond10Yr', 'Bond15Yr', 'Bond20Yr','Bond30Yr')) %&gt;% \n  mutate(Date = as.Date(Date, format = '%d/%m/%Y')) %&gt;% \n  mutate(Year = year(Date)) %&gt;% \n  mutate(Month = month(Date)) %&gt;% \n  mutate(Day = day(Date)) %&gt;% \n  mutate(Year = as.factor(Year)) %&gt;% \n  mutate(Month = as.factor(Month)) %&gt;% \n  select(-Bond15Yr, -Bond20Yr, -Bond30Yr)\n\nsora &lt;- read_csv('data/Singapore Overnight Rate Average SORA Daily.csv') %&gt;% \n  setNames(c('Date', 'Rate')) %&gt;% \n  mutate(Date = as.Date(Date, format = '%d/%m/%Y')) %&gt;% \n  mutate(Year = year(Date)) %&gt;% \n  mutate(Month = month(Date)) %&gt;% \n  mutate(Day = day(Date)) %&gt;% \n  mutate(Year = as.factor(Year)) %&gt;% \n  mutate(Month = as.factor(Month))\n\n\n\nData Wrangling - to compute change (for SORA and Bond/Bill rates) and percentage change (for the various indices and prices)\n\n# PPI - percentage change computations\nppi_quarter &lt;- ppi %&gt;% \n  mutate(`%Change_PR_All` = (PR_All - lag(PR_All))/lag(PR_All)*100) %&gt;% \n  mutate(`%Change_PR_Landed` = (PR_Landed - lag(PR_Landed))/lag(PR_Landed)*100) %&gt;% \n  mutate(`%Change_PR_NL_ALL` = (PR_NL_ALL - lag(PR_NL_ALL))/lag(PR_NL_ALL)*100) %&gt;% \n  mutate(`%Change_PR_NL_CCR` = (PR_NL_CCR - lag(PR_NL_CCR))/lag(PR_NL_CCR)*100) %&gt;% \n  mutate(`%Change_PR_NL_RCR` = (PR_NL_RCR - lag(PR_NL_RCR))/lag(PR_NL_RCR)*100) %&gt;% \n  mutate(`%Change_PR_NL_OCR` = (PR_NL_OCR - lag(PR_NL_OCR))/lag(PR_NL_OCR)*100) %&gt;% \n  mutate(Quarter = case_when(\n    Month == 3 ~ 'Q1',\n    Month == 6 ~ 'Q2',\n    Month == 9 ~ 'Q3',\n    Month == 12 ~ 'Q4'\n  )) %&gt;% \n  select(-Month) %&gt;% \n  select('Year','Quarter',everything())\n\n\n# material price_month - percentage change computations\nmaterial_price_month &lt;- material_price %&gt;% \n  mutate(`%Change_Cement` = (Cement - lag(Cement))/lag(Cement)*100) %&gt;% \n  mutate(`%Change_SteelBar` = (SteelBar - lag(SteelBar))/lag(SteelBar)*100) %&gt;%\n  mutate(`%Change_Granite` = (Granite - lag(Granite))/lag(Granite)*100) %&gt;%\n  mutate(`%Change_ConcretingSand` = (ConcretingSand - lag(ConcretingSand))/lag(ConcretingSand)*100) %&gt;%\n  mutate(`%Change_ReadyMixConcrete` = (ReadyMixConcrete - lag(ReadyMixConcrete))/lag(ReadyMixConcrete)*100) %&gt;% \n  select(-Date) %&gt;% \n  select(Year, Month, everything())\n\n# material price_quarter_avg - percentage change computations\nmaterial_price_quarter_avg &lt;- material_price %&gt;%\n  mutate(Quarter = case_when(\n    (Month == 1 | Month == 2 | Month == 3) ~ 'Q1',\n    (Month == 4 | Month == 5 | Month == 6) ~ 'Q2',\n    (Month == 7 | Month == 8 | Month == 9) ~ 'Q3',\n    (Month == 10 | Month == 11 | Month == 12) ~ 'Q4'\n  )) %&gt;%\n  select(-Date, -Month) %&gt;%\n  group_by(Year, Quarter) %&gt;% \n  summarise_all(.funs=mean) %&gt;% \n  ungroup() %&gt;% \n  mutate(`%Change_Cement` = (Cement - lag(Cement))/lag(Cement)*100) %&gt;% \n  mutate(`%Change_SteelBar` = (SteelBar - lag(SteelBar))/lag(SteelBar)*100) %&gt;%\n  mutate(`%Change_Granite` = (Granite - lag(Granite))/lag(Granite)*100) %&gt;%\n  mutate(`%Change_ConcretingSand` = (ConcretingSand - lag(ConcretingSand))/lag(ConcretingSand)*100) %&gt;%\n  mutate(`%Change_ReadyMixConcrete` = (ReadyMixConcrete - lag(ReadyMixConcrete))/lag(ReadyMixConcrete)*100) %&gt;% \n  select(Year, Quarter, everything())\n\n\n# sti_month_avg - percentage change computations\nsti_month_avg &lt;- sti %&gt;% \n  group_by(Year, Month) %&gt;% \n  summarise_all(.funs=mean) %&gt;%\n  ungroup() %&gt;% \n  mutate(`%Change_Index` = (Index - lag(Index))/lag(Index)*100) %&gt;% \n  select(-Date, -Day) %&gt;% \n  select(Year, Month, everything())\n  \n# sti_quarter_avg - percentage change computations\nsti_quarter_avg &lt;- sti %&gt;% \n  mutate(Quarter = case_when(\n    (Month == 1 | Month == 2 | Month == 3) ~ 'Q1',\n    (Month == 4 | Month == 5 | Month == 6) ~ 'Q2',\n    (Month == 7 | Month == 8 | Month == 9) ~ 'Q3',\n    (Month == 10 | Month == 11 | Month == 12) ~ 'Q4'\n  )) %&gt;% \n  select(-Date, -Month, -Day) %&gt;%\n  group_by(Year, Quarter) %&gt;% \n  summarise_all(.funs=mean) %&gt;%         \n  ungroup() %&gt;%\n  mutate(`%Change_Index` = (Index - lag(Index))/lag(Index)*100) %&gt;% \n  select(Year, Quarter, everything())\n\n\n# tbillbond_month - rate change computations\ntbillbond_month_avg &lt;- tbillbond %&gt;% \n  group_by(Year, Month) %&gt;% \n  summarise_all(.funs=mean) %&gt;%\n  ungroup() %&gt;% \n  mutate(`Change_Bill1Yr` = Bill1Yr - lag(Bill1Yr)) %&gt;% \n  mutate(`Change_Bond2Yr` = Bond2Yr - lag(Bond2Yr)) %&gt;% \n  mutate(`Change_Bond5Yr` = Bond5Yr - lag(Bond5Yr)) %&gt;% \n  mutate(`Change_Bond10Yr` = Bond10Yr - lag(Bond10Yr)) %&gt;% \n  select(-Date, -Day) %&gt;% \n  select(Year, Month, everything())\n\n# tbillbond_quarter_avg - percentage change computations\ntbillbond_quarter_avg &lt;- tbillbond %&gt;% \n  mutate(Quarter = case_when(\n    (Month == 1 | Month == 2 | Month == 3) ~ 'Q1',\n    (Month == 4 | Month == 5 | Month == 6) ~ 'Q2',\n    (Month == 7 | Month == 8 | Month == 9) ~ 'Q3',\n    (Month == 10 | Month == 11 | Month == 12) ~ 'Q4'\n  )) %&gt;% \n  select(-Date, -Month, -Day) %&gt;% \n  group_by(Year, Quarter) %&gt;% \n  summarise_all(.funs=mean) %&gt;%\n  ungroup() %&gt;%\n  mutate(`Change_Bill1Yr` = Bill1Yr - lag(Bill1Yr)) %&gt;% \n  mutate(`Change_Bond2Yr` = Bond2Yr - lag(Bond2Yr)) %&gt;% \n  mutate(`Change_Bond5Yr` = Bond5Yr - lag(Bond5Yr)) %&gt;% \n  mutate(`Change_Bond10Yr` = Bond10Yr - lag(Bond10Yr)) %&gt;% \n  \n  select(Year, Quarter, everything())\n\n\n# sora_month - percentage change computations\nsora_month_avg &lt;- sora %&gt;% \n  group_by(Year, Month) %&gt;% \n  summarise_all(.funs=mean) %&gt;%\n  ungroup() %&gt;% \n  mutate(`Change_Rate` = Rate - lag(Rate)) %&gt;% \n  select(-Date, -Day) %&gt;% \n  select(Year, Month, everything())\n\n# sora_quarter_avg - percentage change computations\nsora_quarter_avg &lt;- sora %&gt;% \n  mutate(Quarter = case_when(\n    (Month == 1 | Month == 2 | Month == 3) ~ 'Q1',\n    (Month == 4 | Month == 5 | Month == 6) ~ 'Q2',\n    (Month == 7 | Month == 8 | Month == 9) ~ 'Q3',\n    (Month == 10 | Month == 11 | Month == 12) ~ 'Q4'\n  )) %&gt;%\n  select(-Date, -Month, -Day) %&gt;%\n  group_by(Year, Quarter) %&gt;% \n  summarise_all(.funs=mean) %&gt;%\n  ungroup() %&gt;%\n  mutate(`Change_Rate` = Rate - lag(Rate)) %&gt;% \n  select(Year, Quarter, everything())\n\n\n\n\n# put all monthly data into 1 dataset\ndata_by_month &lt;- material_price_month %&gt;% \n  inner_join(sti_month_avg, by = c(\"Year\", \"Month\")) %&gt;% \n  inner_join(tbillbond_month_avg, by = c(\"Year\", \"Month\")) %&gt;% \n  inner_join(sora_month_avg, by = c(\"Year\", \"Month\")) %&gt;% \n  mutate(MonthLabel = paste0(Month, 'M', as.character(Year))) %&gt;% \n  mutate(Date = as.Date(paste0('01-', Month, '-', Year), format=\"%d-%m-%Y\")) %&gt;% \n  select(Date, MonthLabel, everything(), -Year, -Month)\n\n# put all quarter data into 1 dataset\ndata_by_quarter &lt;- ppi_quarter %&gt;% \n  inner_join(material_price_quarter_avg, by = c(\"Year\", \"Quarter\")) %&gt;% \n  inner_join(sti_quarter_avg, by = c(\"Year\", \"Quarter\")) %&gt;% \n  inner_join(tbillbond_quarter_avg, by = c(\"Year\", \"Quarter\")) %&gt;% \n  inner_join(sora_quarter_avg, by = c(\"Year\", \"Quarter\")) %&gt;% \n  mutate(QuarterLabel = paste0(Quarter, as.character(Year)))  %&gt;% \n  mutate(Date = paste0(Year, '-', ifelse(Quarter == \"Q1\", \"03\", \n                                      ifelse(Quarter == \"Q2\", \"06\",\n                                             ifelse(Quarter == \"Q3\", \"09\", \"12\"))), \"-01\")) %&gt;% \n  mutate(Date = as.Date(Date)) %&gt;% \n  select(Date, QuarterLabel, everything(), -Year, -Quarter)\n\n\n\n\nwrite.csv(data_by_month, \"data/data_by_month.csv\", row.names = FALSE)\n\nwrite.csv(data_by_quarter, \"data/data_by_quarter.csv\", row.names = FALSE)\n\n\n\n\nmonth_data &lt;- read_csv('data/data_by_month.csv')\nquarter_data &lt;- read_csv('data/data_by_quarter.csv')\n\n\n\n\nFirst we check the variables of both tables:\n\n\nCode\nsummary(month_data)\n\n\n     Date            MonthLabel            Cement          SteelBar     \n Length:222         Length:222         Min.   : 74.80   Min.   : 391.6  \n Class :character   Class :character   1st Qu.: 86.00   1st Qu.: 717.9  \n Mode  :character   Mode  :character   Median : 93.20   Median : 780.8  \n                                       Mean   : 95.15   Mean   : 821.7  \n                                       3rd Qu.:101.35   3rd Qu.: 913.4  \n                                       Max.   :126.30   Max.   :1713.7  \n                                                                        \n    Granite      ConcretingSand  ReadyMixConcrete PCChange_Cement  \n Min.   :14.60   Min.   :12.09   Min.   : 72.48   Min.   :-4.7660  \n 1st Qu.:17.52   1st Qu.:21.25   1st Qu.: 90.12   1st Qu.:-0.3994  \n Median :19.35   Median :23.90   Median :100.70   Median : 0.0000  \n Mean   :20.05   Mean   :25.02   Mean   :101.87   Mean   : 0.1314  \n 3rd Qu.:21.20   3rd Qu.:28.10   3rd Qu.:111.17   3rd Qu.: 0.4842  \n Max.   :68.97   Max.   :60.00   Max.   :190.00   Max.   : 7.4649  \n                                                                   \n PCChange_SteelBar  PCChange_Granite   PCChange_ConcretingSand\n Min.   :-17.4149   Min.   :-34.7552   Min.   :-12.5000       \n 1st Qu.: -1.6301   1st Qu.: -1.4085   1st Qu.: -1.7731       \n Median : -0.3221   Median :  0.0000   Median :  0.0000       \n Mean   :  0.1559   Mean   :  0.6998   Mean   :  0.7289       \n 3rd Qu.:  1.0772   3rd Qu.:  1.0088   3rd Qu.:  1.2821       \n Max.   : 19.6820   Max.   :230.0000   Max.   :122.6345       \n                                                              \n PCChange_ReadyMixConcrete     Index      PCChange_Index        Bill1Yr      \n Min.   :-10.1933          Min.   :1591   Min.   :-22.8938   Min.   :0.1814  \n 1st Qu.: -0.6955          1st Qu.:2819   1st Qu.: -1.8218   1st Qu.:0.3495  \n Median :  0.0000          Median :3118   Median :  0.3832   Median :0.9307  \n Mean   :  0.3634          Mean   :3000   Mean   :  0.2502   Mean   :1.2596  \n 3rd Qu.:  0.3784          3rd Qu.:3237   3rd Qu.:  2.6730   3rd Qu.:1.9225  \n Max.   : 91.1469          Max.   :3787   Max.   : 19.5529   Max.   :4.1300  \n                                                                             \n    Bond2Yr          Bond5Yr          Bond10Yr     Change_Bill1Yr     \n Min.   :0.1355   Min.   :0.3441   Min.   :0.800   Min.   :-0.485591  \n 1st Qu.:0.4440   1st Qu.:1.0684   1st Qu.:1.881   1st Qu.:-0.026110  \n Median :1.0149   Median :1.5646   Median :2.337   Median : 0.004091  \n Mean   :1.2805   Mean   :1.6764   Mean   :2.296   Mean   : 0.007893  \n 3rd Qu.:1.9497   3rd Qu.:2.2394   3rd Qu.:2.711   3rd Qu.: 0.044283  \n Max.   :3.6732   Max.   :3.4645   Max.   :3.604   Max.   : 0.623636  \n                                                                      \n Change_Bond2Yr      Change_Bond5Yr      Change_Bond10Yr           Rate        \n Min.   :-0.517046   Min.   :-0.533995   Min.   :-0.5103095   Min.   :0.02998  \n 1st Qu.:-0.051878   1st Qu.:-0.079441   1st Qu.:-0.0818316   1st Qu.:0.09469  \n Median : 0.006621   Median :-0.007764   Median :-0.0087236   Median :0.27493  \n Mean   : 0.005881   Mean   : 0.002286   Mean   : 0.0008669   Mean   :0.91040  \n 3rd Qu.: 0.060698   3rd Qu.: 0.086852   3rd Qu.: 0.0785649   3rd Qu.:1.45831  \n Max.   : 0.473636   Max.   : 0.704095   Max.   : 0.9062381   Max.   :3.74754  \n                                                                               \n  Change_Rate        Landed ($ PSF)   PCChange_Landed ($ PSF)\n Min.   :-0.766125   Min.   : 435.2   Min.   :-13.3204       \n 1st Qu.:-0.046168   1st Qu.: 815.2   1st Qu.: -2.8110       \n Median : 0.002601   Median :1187.6   Median :  0.5539       \n Mean   : 0.008554   Mean   :1091.9   Mean   :  0.7268       \n 3rd Qu.: 0.061680   3rd Qu.:1270.5   3rd Qu.:  4.0448       \n Max.   : 0.839497   Max.   :1839.4   Max.   : 19.1649       \n NA's   :1                                                   \n Non-Landed CCR ($ PSF) PCChange_Non-Landed CCR ($ PSF) Non-Landed RCR ($ PSF)\n Min.   : 802.7         Min.   :-24.8896                Min.   : 545.6        \n 1st Qu.:1757.5         1st Qu.: -2.9663                1st Qu.:1094.2        \n Median :1926.6         Median :  0.5208                Median :1387.2        \n Mean   :1908.8         Mean   :  0.6299                Mean   :1353.1        \n 3rd Qu.:2192.1         3rd Qu.:  4.2509                3rd Qu.:1646.1        \n Max.   :2674.5         Max.   : 23.1932                Max.   :2300.1        \n                                                                              \n PCChange_Non-Landed RCR ($ PSF) Non-Landed OCR ($ PSF)\n Min.   :-23.6088                Min.   : 438.4        \n 1st Qu.: -2.8856                1st Qu.: 777.0        \n Median :  0.2460                Median :1095.1        \n Mean   :  0.7891                Mean   :1035.2        \n 3rd Qu.:  4.2799                3rd Qu.:1236.0        \n Max.   : 29.5848                Max.   :1929.2        \n                                                       \n PCChange_Non-Landed OCR ($ PSF)\n Min.   :-20.6987               \n 1st Qu.: -2.8455               \n Median :  0.2805               \n Mean   :  0.7547               \n 3rd Qu.:  3.0962               \n Max.   : 25.0905               \n                                \n\n\nCode\nsummary(quarter_data)\n\n\n      Date            QuarterLabel           PR_All        PR_Landed    \n Min.   :2005-09-01   Length:74          Min.   : 83.3   Min.   : 84.8  \n 1st Qu.:2010-03-24   Class :character   1st Qu.:128.1   1st Qu.:130.4  \n Median :2014-10-16   Mode  :character   Median :146.2   Median :164.3  \n Mean   :2014-10-16                      Mean   :141.6   Mean   :156.2  \n 3rd Qu.:2019-05-09                      3rd Qu.:152.8   3rd Qu.:175.4  \n Max.   :2023-12-01                      Max.   :201.5   Max.   :233.2  \n                                                                        \n   PR_NL_ALL       PR_NL_CCR       PR_NL_RCR       PR_NL_OCR    \n Min.   : 83.1   Min.   : 79.7   Min.   : 94.1   Min.   : 83.6  \n 1st Qu.:129.4   1st Qu.:126.6   1st Qu.:134.4   1st Qu.:127.5  \n Median :140.9   Median :132.7   Median :147.4   Median :158.1  \n Mean   :138.2   Mean   :128.0   Mean   :145.6   Mean   :154.0  \n 3rd Qu.:148.1   3rd Qu.:137.9   3rd Qu.:154.1   3rd Qu.:171.5  \n Max.   :194.2   Max.   :148.1   Max.   :213.9   Max.   :248.1  \n                                                                \n PCChange_PR_All    PCChange_PR_Landed PCChange_PR_NL_ALL PCChange_PR_NL_CCR\n Min.   :-14.0893   Min.   :-9.1735    Min.   :-15.1104   Min.   :-16.2479  \n 1st Qu.: -0.4112   1st Qu.:-0.8242    1st Qu.: -0.2894   1st Qu.: -0.5599  \n Median :  0.7929   Median : 0.9589    Median :  0.7262   Median :  0.6098  \n Mean   :  1.2792   Mean   : 1.4486    Mean   :  1.2393   Mean   :  0.9463  \n 3rd Qu.:  2.7872   3rd Qu.: 3.6142    3rd Qu.:  2.4387   3rd Qu.:  2.2673  \n Max.   : 15.7398   Max.   :14.9003    Max.   : 15.9496   Max.   : 15.1899  \n                                                                            \n PCChange_PR_NL_RCR PCChange_PR_NL_OCR     Cement          SteelBar     \n Min.   :-16.9435   Min.   :-7.3216    Min.   : 75.37   Min.   : 416.2  \n 1st Qu.: -0.5996   1st Qu.:-0.1181    1st Qu.: 85.90   1st Qu.: 717.2  \n Median :  0.4096   Median : 1.0051    Median : 93.42   Median : 774.1  \n Mean   :  1.1859   Mean   : 1.5301    Mean   : 95.15   Mean   : 821.7  \n 3rd Qu.:  2.5677   3rd Qu.: 2.1980    3rd Qu.:101.22   3rd Qu.: 916.2  \n Max.   : 18.5146   Max.   :16.0696    Max.   :125.91   Max.   :1626.9  \n                                                                        \n    Granite      ConcretingSand  ReadyMixConcrete PCChange_Cement  \n Min.   :14.83   Min.   :12.38   Min.   : 72.82   Min.   :-8.2837  \n 1st Qu.:17.68   1st Qu.:21.73   1st Qu.: 90.61   1st Qu.:-1.0824  \n Median :19.45   Median :23.82   Median :101.28   Median : 0.2793  \n Mean   :20.05   Mean   :25.02   Mean   :101.87   Mean   : 0.4298  \n 3rd Qu.:21.50   3rd Qu.:28.06   3rd Qu.:111.22   3rd Qu.: 1.8847  \n Max.   :41.82   Max.   :57.45   Max.   :168.80   Max.   :13.9593  \n                                                                   \n PCChange_SteelBar  PCChange_Granite   PCChange_ConcretingSand\n Min.   :-32.9593   Min.   :-41.6501   Min.   :-20.8906       \n 1st Qu.: -3.6214   1st Qu.: -3.6486   1st Qu.: -2.9350       \n Median : -1.0407   Median :  0.1429   Median : -0.2193       \n Mean   :  0.6331   Mean   :  1.0694   Mean   :  2.1542       \n 3rd Qu.:  4.5361   3rd Qu.:  3.5446   3rd Qu.:  3.4565       \n Max.   : 32.9525   Max.   :101.2698   Max.   :115.1042       \n                                                              \n PCChange_ReadyMixConcrete     Index      PCChange_Index        Bill1Yr      \n Min.   :-19.4708          Min.   :1674   Min.   :-33.7447   Min.   :0.2477  \n 1st Qu.: -1.5607          1st Qu.:2839   1st Qu.: -1.5478   1st Qu.:0.3574  \n Median : -0.1701          Median :3118   Median :  1.1822   Median :0.9521  \n Mean   :  0.9889          Mean   :3000   Mean   :  0.8111   Mean   :1.2597  \n 3rd Qu.:  1.2220          3rd Qu.:3240   3rd Qu.:  4.1286   3rd Qu.:1.9434  \n Max.   : 61.3151          Max.   :3600   Max.   : 27.1185   Max.   :3.9295  \n                                                                             \n    Bond2Yr          Bond5Yr          Bond10Yr      Change_Bill1Yr    \n Min.   :0.1787   Min.   :0.3778   Min.   :0.8854   Min.   :-0.99239  \n 1st Qu.:0.4398   1st Qu.:1.0908   1st Qu.:1.8475   1st Qu.:-0.06383  \n Median :1.0306   Median :1.5938   Median :2.3358   Median : 0.01834  \n Mean   :1.2811   Mean   :1.6769   Mean   :2.2965   Mean   : 0.02373  \n 3rd Qu.:1.9508   3rd Qu.:2.2000   3rd Qu.:2.7364   3rd Qu.: 0.11291  \n Max.   :3.5476   Max.   :3.2817   Max.   :3.5053   Max.   : 1.13440  \n                                                                      \n Change_Bond2Yr     Change_Bond5Yr      Change_Bond10Yr          Rate        \n Min.   :-0.89210   Min.   :-0.825660   Min.   :-0.686901   Min.   :0.04001  \n 1st Qu.:-0.07722   1st Qu.:-0.108647   1st Qu.:-0.165335   1st Qu.:0.11305  \n Median : 0.01397   Median :-0.005920   Median :-0.035819   Median :0.23987  \n Mean   : 0.01914   Mean   : 0.008438   Mean   : 0.003687   Mean   :0.91064  \n 3rd Qu.: 0.12024   3rd Qu.: 0.164240   3rd Qu.: 0.205671   3rd Qu.:1.48863  \n Max.   : 0.95915   Max.   : 0.881261   Max.   : 0.818961   Max.   :3.67181  \n                                                                             \n  Change_Rate        Landed ($ PSF)   PCChange_Landed  Non-Landed CCR ($ PSF)\n Min.   :-0.705511   Min.   : 450.6   Min.   :-9.896   Min.   : 851.8        \n 1st Qu.:-0.035194   1st Qu.: 831.9   1st Qu.:-1.231   1st Qu.:1797.1        \n Median : 0.007276   Median :1193.7   Median : 1.818   Median :1931.0        \n Mean   : 0.024368   Mean   :1092.6   Mean   : 1.942   Mean   :1914.1        \n 3rd Qu.: 0.096097   3rd Qu.:1255.9   3rd Qu.: 5.447   3rd Qu.:2226.7        \n Max.   : 1.269015   Max.   :1812.9   Max.   :13.693   Max.   :2580.9        \n NA's   :1                                                                   \n PCChange_NonLandedCCR Non-Landed RCR ($ PSF) PCChange_NonLandedRCR\n Min.   :-20.788       Min.   : 586.4         Min.   :-10.8709     \n 1st Qu.: -1.775       1st Qu.:1070.9         1st Qu.: -2.5762     \n Median :  1.478       Median :1404.6         Median :  0.3982     \n Mean   :  1.735       Mean   :1361.0         Mean   :  1.8772     \n 3rd Qu.:  5.658       3rd Qu.:1650.2         3rd Qu.:  4.1783     \n Max.   : 24.211       Max.   :2204.3         Max.   : 31.4153     \n                                                                   \n Non-Landed OCR ($ PSF) PCChange_NonLandedOCR\n Min.   : 452.8         Min.   :-15.279      \n 1st Qu.: 777.2         1st Qu.: -1.724      \n Median :1112.5         Median :  1.625      \n Mean   :1040.5         Mean   :  1.992      \n 3rd Qu.:1239.9         3rd Qu.:  5.391      \n Max.   :1729.6         Max.   : 20.638      \n                                             \n\n\nWe can see that there is no corresponding data for PPI in month_data, and secondly, there are a lot of variables. In order to make it easier for the user to choose, I have used the following code to divide the variables into four categories: PPI, Materials, Index and Financial. Providing a clear path of choices is essential for managing complex datasets, especially when dealing with multiple sources or categories. This approach reduces information overload, enabling users to perform focused analyses quickly.\n\ncategories_quarter &lt;- list(\n  PPI = c(\"PR_All\", \"PR_Landed\", \"PR_NL_ALL\", \"PR_NL_CCR\", \"PR_NL_RCR\", \"PR_NL_OCR\"),\n  Materials = c(\"Cement\", \"SteelBar\", \"Granite\", \"ConcretingSand\", \"ReadyMixConcrete\"),\n  Index = c(\"Index\"),\n  Financial =  c(\"Bill1Yr\", \"Bond2Yr\", \"Bond5Yr\", \"Bond10Yr\", \"Rate\")\n)\n\ncategories_month &lt;- list(\n  Materials = c(\"Cement\", \"SteelBar\", \"Granite\", \"ConcretingSand\", \"ReadyMixConcrete\"),\n  Index = c(\"Index\"),\n  Financial =  c(\"Bill1Yr\", \"Bond2Yr\", \"Bond5Yr\", \"Bond10Yr\", \"Rate\")\n)\n\nIn addition, both datasets count the variable change, so we deal with the data variable of change.\n\ncategories_changes_quarter &lt;- lapply(names(categories_quarter), function(category) {\n  if (category != \"Financial\") {\n    paste0(\"%Change_\", categories_quarter[[category]])\n  } else {\n    paste0(\"Change_\", categories_quarter[[category]])\n  }\n})\n\ncategories_changes_month &lt;- lapply(names(categories_month), function(category) {\n  if (category != \"Financial\") {\n    paste0(\"%Change_\", categories_month[[category]])\n  } else {\n    paste0(\"Change_\", categories_month[[category]])\n  }\n})\n\ncategories_changes_quarter &lt;- setNames(categories_changes_quarter, names(categories_quarter))\ncategories_changes_month &lt;- setNames(categories_changes_month, names(categories_month))\n\nThese code snippets take two lists categorized by quarters and months, respectively, iterate over each category within these lists, and create new lists where the variables are renamed to indicate changes (either percentage or absolute changes).\nNext,Pre-processing of quarterly and monthly data.\n\nquarter_data$Year &lt;- as.numeric(substr(quarter_data$QuarterLabel, 3, 6))\nquarter_data$Quarter &lt;- substr(quarter_data$QuarterLabel, 1, 2)\nmonth_data$Year &lt;- lubridate::year(month_data$Date)\nmonth_data$Month &lt;- lubridate::month(month_data$Date)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#design-for-eda",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#design-for-eda",
    "title": "Take Home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "3 Design for EDA",
    "text": "3 Design for EDA\nIn this exercise, I will be responsible for the EDA part of our group project shinyapp, here is my Shinyapp Prototype. --https://isss608-cjh.shinyapps.io/ProjectEDA/\n\n3.1 Overview\n\nThis UI is designed for a Shiny app, structured using dashboardPage from the shinydashboard package, aiming to provide a user-friendly interface for Exploratory Data Analysis (EDA).\nThe sidebar is organized into main analysis types - Trend, Distribution, Autocorrelation, and Crosscorrelation - to guide the user through the different facets of EDA. Users can click on these to switch between different analyses.\n\n\n3.2 Trend\n\n3.2.1 Test Code\nWe test the Trend Line Plot in “Index” variable using plotly package\n\nlibrary(plotly)\n    p &lt;- ggplot(month_data, aes(x = Date, y = .data[[\"Index\"]])) +\n      geom_line(size = 1.2, color = \"#3366CC\") + \n      labs(title = paste(\"Trend of\", y = \"Index\", \"over Time\"), x = \"Date\", y = \"Index\", \n           title.size = 18, title.color = \"#333333\") + \n      theme_minimal() +\n      theme(\n        plot.title = element_text(family = \"Arial\"), \n        axis.title = element_text(family = \"Arial\", size = 14), \n        axis.text = element_text(family = \"Arial\", size = 12), \n        panel.grid.major = element_line(color = \"#D3D3D3\", linewidth = 0.5), # \n        panel.grid.minor = element_blank(), \n        panel.background = element_rect(fill = \"#F8F8F8\") \n      )\n    \n    ggplotly(p)\n\n\n\n\n\n\n\n3.2.2 Ui Design\n\n\n\n\n\nFilter Panel:\nWithin the “Trend” analysis tab, the sidebar serves as a filter panel where users can customize the data they wish to analyze by:\n\nView by: Allows selection between ‘Quarter’ and ‘Month’, catering to datasets with different temporal resolutions. (When selecting Month, PPI cannot be selected due to missing data)\nChoose a category: Enables the selection of a data category (‘PPI’, ‘Materials’, ‘Index’, ‘Financial’), which represents different variable categories.\nChoose a variable: Offers a dropdown to select specific variables within the chosen category.\nData Type: Users can switch between ‘Original’ data or ‘Change’ data. The “Change” data typically represents derived statistics such as growth rates or absolute changes, providing insights into how the selected variables evolve over time. This feature enriches the analysis by offering a comparative view of the raw data against its rate of change, catering to different analytical needs and preferences.\nTime Selection: Slider inputs for ‘Start Year’ and ‘End Year’ facilitate the specification of a time range for the analysis. Dropdowns for ‘Start Quarter’ and ‘End Quarter’ or ‘Start Month’ and ‘End Month’ provide more granular control over the selected time period.\n\nInteractive Line Plot:\nThe plot itself is designed for interactivity (using plotly), providing tooltips on hover for detailed insights into specific data points. The use of a line plot is ideal for visualizing time series data and observing trends over a selected period.\n\n\n\n3.3 Distribution\n\n3.3.1 Test Code\nWe test Distribution Histogram in “Index” variable using ggplot2 and plotly package.\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Specify the number of bins for the histogram\nbins_count &lt;- 15\n\n# Create a histogram for the 'Index' column and add vertical lines for mean and median\nplot &lt;- ggplot(month_data, aes(x = Index)) +\n  geom_histogram(bins = bins_count, fill = \"#6D9EC1\", color = \"white\") +\n  geom_vline(aes(xintercept = mean(Index, na.rm = TRUE)), color = \"#E46726\", linetype = \"dashed\") +\n  geom_vline(aes(xintercept = median(Index, na.rm = TRUE)), color = \"gold\", linetype = \"dashed\") +\n  labs(title = \"Distribution of Index\", x = \"Index\", y = \"Frequency\") +\n  theme_minimal()\n\n# Convert the ggplot object to an interactive Plotly object\np &lt;- ggplotly(plot)\n\n# Add annotations for mean and median to the plot\np &lt;- p %&gt;% layout(annotations = list(\n  list(\n    text = \"Mean\",  # Text label for the mean\n    x = mean(month_data$Index, na.rm = TRUE),  # Position of the mean on x-axis\n    y = 0.85,  # Position of the text on the plot (relative to the plot area)\n    xref = \"x\",\n    yref = \"paper\",\n    showarrow = FALSE,  # Do not show an arrow\n    font = list(color = \"#E46726\", size = 10)  # Font settings\n  ),\n  list(\n    text = \"Median\",  # Text label for the median\n    x = median(month_data$Index, na.rm = TRUE),  # Position of the median on x-axis\n    y = 0.70,  # Position of the text on the plot (relative to the plot area)\n    xref = \"x\",\n    yref = \"paper\",\n    showarrow = FALSE,  # Do not show an arrow\n    font = list(color = \"gold\", size = 10)  # Font settings\n  )\n))\n\n# Display the interactive plot\np\n\n\n\n\n\n\n\n3.3.2 Ui Design\n\n\n\n\n\nFilter Panel:\n\nCategory and Variable Selection: Users begin by selecting a varialbe category from the ‘Choose a category’ dropdown, followed by choosing a variable, within that category from the ‘Choose a variable’ dropdown. This enables users to focus their analysis on specific variable, making the data analysis more targeted and specific.\nYear Range Selection: Users employ a slider input to select a specific range of years. The start and end years can be set by adjusting the slider, allowing users to concentrate on data from a specific period.\nAdjusting Number of Bins: A slider is provided to adjust the number of bins in the histogram, allowing users to view a rough or detailed distribution of data as needed. The number of bins in a histogram directly affects how users perceive data distribution. Being able to adjust the number of bins enables users to tailor the view to different characteristics of the data and analysis needs, thus gaining deeper insights.\n\nInteractive Histogram:\nA histogram is generated based on the user-selected category and variable. If the ‘PPI’ category is selected, the quarter_data is used; otherwise, month_data is used, supplemented with dashed lines indicating mean and median values. Visual markers for mean and median provide users with an intuitive sense of the dataset’s central tendencies, helping to identify the shape of the distribution and where data points are concentrated.\n\n\n\n3.4 Autocorrelation\n\n3.4.1 Test Code\nWe test the Autocorrelation Plot in “Index” variable using ggplot2 , dplyr and viridis (for color) package.\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(viridis)\n\n\n# Choose colors\nviridis_colors &lt;- viridis::viridis_pal()(5)\n\n# Plot\np &lt;- ggplot(quarter_data, aes(x = factor(Year), y = Index)) +\n  geom_boxplot(fill = \"darkblue\") +\n  stat_summary(fun.y = mean, geom = \"line\", aes(group = 1), color = \"gold\") +\n  labs(title = \"Boxplot and Mean of PR_All over Time\", x = \"Year\", y = \"Index\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 18, color = \"#333333\"),\n    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 12),\n    axis.text.y = element_text(size = 12)\n  )\n\n ggplotly(p)\n\n\n\n\n\n\n\n3.4.2 Ui Design\n\nBy yearBy monthBy quarter\n\n\n\n\n\n\n\n\n\n\n\n\nFilter Panel:\n\nVariable Selection: The choice of variables is similar to Trend. Users can select between “Original” and “Change” data types, variables are also selected based on the chosen category.\nView Mode: Time-based data visualization requires an axis that accurately reflects the time increments of the data. This flexibility ensures that users can quickly interpret the timescale of the autocorrelation without confusion (by Year, Quarter, or Month)\n\nInteractive Boxplot with Mean Over Time\nGenerating a boxplot with an overlaying mean line, providing a visual summary of the distribution of values within each time period as well as the central tendency over time. The combination of a boxplot with a mean line is a powerful way to visualize variability and central tendency in data simultaneously. The x-axis is dynamic and changes based on whether the view mode is set to Year, Quarter, or Month.\n\n\n\n3.5 Correlation\n\n3.5.1 Test Code\nWe test the Autocorrelation Plot in “Index” variable using ggcorrplot and ggplot2 package.\n\nlibrary(ggcorrplot)\nlibrary(ggplot2)\n\nvariables &lt;- c(\n  \"PR_All\", \"PR_Landed\", \"PR_NL_ALL\", \"PR_NL_CCR\", \"PR_NL_RCR\", \"PR_NL_OCR\",\n  \"Cement\", \"SteelBar\", \"Granite\", \"ConcretingSand\", \"ReadyMixConcrete\",\n  \"Index\",\n  \"Bill1Yr\", \"Bond2Yr\", \"Bond5Yr\", \"Bond10Yr\", \"Rate\"\n)\n\n# Subsetting the 'quarter_data' to include only the selected variables\nselected_data &lt;- quarter_data[variables]\n\n# Calculate the correlation matrix\ncorr_matrix &lt;- cor(selected_data, use = \"pairwise.complete.obs\")\n\n# Create the correlation plot using 'ggcorrplot'\nlibrary(ggcorrplot)\np &lt;- ggcorrplot(corr_matrix, hc.order = TRUE, type = \"lower\", outline.col = \"white\",\n                lab = TRUE, lab_size = 3.5,\n                colors = c(\"#6D9EC1\", \"white\", \"#E46726\"), \n                ggtheme = theme_minimal()) +\n      theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1),\n            axis.text.y = element_text(size = 12))\n\n# Print the plot\nprint(p)\n\n\n\n\n\n\n3.5.2 Ui Design\nFilter Panel:\n\n\n\n\n\n\nVariable Selection: A structured selection interface is provided with checkboxes grouped by categories such as “PPI,” “Materials,” “Index,” and “Financial.” By default, all variables within each category are pre-selected. Users can select variables within these categories to include in the cross-correlation analysis. Grouping variables by category helps users navigate through a potentially large number of variables and allows for a more organized selection process. It also facilitates comparisons within and across different categories of data, which is essential for cross-correlation analysis.\nSelect All/Deselect All: Select All” and “Deselect All” buttons are included to provide a quick way to select or clear all checkboxes within each category. This functionality enhances the user experience by providing convenience and saving time, especially when dealing with large datasets where users might want to start with a broad analysis and then refine their selection.\n\nCorrelation Matrix Visualization:\nThe aesthetics of the correlation matrix are enhanced with a color palette ranging from blue (negative correlation) to white (no correlation) to orange (positive correlation). The size of the plot is explicitly controlled to ensure it is appropriately displayed within the dashboard layout. Color coding makes it easier to distinguish between different levels of correlation at a glance. Controlling the size of the output plot ensures that the visualization remains clear and accessible, even on different devices or screen sizes."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#future-work",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#future-work",
    "title": "Take Home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "4 Future Work",
    "text": "4 Future Work\nFollowing the completion of our ShinyApp model’s design phase, our next steps involve refining and integrating the model within the broader context of our group project. While the current iteration of the model meets the initial design and functionality requirements, continuous improvement and integration efforts are essential to enhance its utility, user experience, and analytical capabilities."
  }
]